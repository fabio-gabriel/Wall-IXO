
Wall-ixo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002688  08002688  00012688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026b8  080026b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026b8  080026b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026b8  080026b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026b8  080026b8  000126b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026bc  080026bc  000126bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  080026cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080026cc  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b1f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000145d  00000000  00000000  00027b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  00028fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  000298c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f083  00000000  00000000  0002a128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000986c  00000000  00000000  000391ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005da71  00000000  00000000  00042a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a0488  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002064  00000000  00000000  000a04d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002670 	.word	0x08002670

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002670 	.word	0x08002670

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc42 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f972 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fade 	bl	80007ec <MX_GPIO_Init>
  MX_TIM1_Init();
 8000230:	f000 f9ae 	bl	8000590 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000234:	f000 fa78 	bl	8000728 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //PA7
 8000238:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <main+0x54>)
 800023a:	2100      	movs	r1, #0
 800023c:	0018      	movs	r0, r3
 800023e:	f001 fbf1 	bl	8001a24 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);//PA9
 8000242:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <main+0x54>)
 8000244:	2104      	movs	r1, #4
 8000246:	0018      	movs	r0, r3
 8000248:	f001 fbec 	bl	8001a24 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);//PA10
 800024c:	4b09      	ldr	r3, [pc, #36]	; (8000274 <main+0x54>)
 800024e:	2108      	movs	r1, #8
 8000250:	0018      	movs	r0, r3
 8000252:	f001 fbe7 	bl	8001a24 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//PA6
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <main+0x58>)
 8000258:	2100      	movs	r1, #0
 800025a:	0018      	movs	r0, r3
 800025c:	f001 fbe2 	bl	8001a24 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  anda();
 8000260:	f000 f85a 	bl	8000318 <anda>
	  sensorMeio();
 8000264:	f000 f80a 	bl	800027c <sensorMeio>
	  sensorDireita();
 8000268:	f000 f837 	bl	80002da <sensorDireita>
	  sensorEsquerdo();
 800026c:	f000 f817 	bl	800029e <sensorEsquerdo>
  {
 8000270:	e7f6      	b.n	8000260 <main+0x40>
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	20000028 	.word	0x20000028
 8000278:	20000070 	.word	0x20000070

0800027c <sensorMeio>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void sensorMeio(){
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 8000280:	2390      	movs	r3, #144	; 0x90
 8000282:	05db      	lsls	r3, r3, #23
 8000284:	2102      	movs	r1, #2
 8000286:	0018      	movs	r0, r3
 8000288:	f000 febc 	bl	8001004 <HAL_GPIO_ReadPin>
 800028c:	1e03      	subs	r3, r0, #0
 800028e:	d003      	beq.n	8000298 <sensorMeio+0x1c>
			  para();
 8000290:	f000 f882 	bl	8000398 <para>
		      gira90();
 8000294:	f000 f896 	bl	80003c4 <gira90>
	}
}
 8000298:	46c0      	nop			; (mov r8, r8)
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}

0800029e <sensorEsquerdo>:
void sensorEsquerdo(){
 800029e:	b580      	push	{r7, lr}
 80002a0:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 80002a2:	2390      	movs	r3, #144	; 0x90
 80002a4:	05db      	lsls	r3, r3, #23
 80002a6:	2101      	movs	r1, #1
 80002a8:	0018      	movs	r0, r3
 80002aa:	f000 feab 	bl	8001004 <HAL_GPIO_ReadPin>
 80002ae:	1e03      	subs	r3, r0, #0
 80002b0:	d010      	beq.n	80002d4 <sensorEsquerdo+0x36>
			  para();
 80002b2:	f000 f871 	bl	8000398 <para>
		      gira90();
 80002b6:	f000 f885 	bl	80003c4 <gira90>
		      para();
 80002ba:	f000 f86d 	bl	8000398 <para>
		      andaPouco(1000);
 80002be:	23fa      	movs	r3, #250	; 0xfa
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	0018      	movs	r0, r3
 80002c4:	f000 f846 	bl	8000354 <andaPouco>
		      para();
 80002c8:	f000 f866 	bl	8000398 <para>
		      gira90Nega();
 80002cc:	f000 f8aa 	bl	8000424 <gira90Nega>
		      anda();
 80002d0:	f000 f822 	bl	8000318 <anda>
	}
}
 80002d4:	46c0      	nop			; (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}

080002da <sensorDireita>:
void sensorDireita(){
 80002da:	b580      	push	{r7, lr}
 80002dc:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)){
 80002de:	2390      	movs	r3, #144	; 0x90
 80002e0:	05db      	lsls	r3, r3, #23
 80002e2:	2104      	movs	r1, #4
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fe8d 	bl	8001004 <HAL_GPIO_ReadPin>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d010      	beq.n	8000310 <sensorDireita+0x36>
		para();
 80002ee:	f000 f853 	bl	8000398 <para>
				      gira90Nega();
 80002f2:	f000 f897 	bl	8000424 <gira90Nega>
				      para();
 80002f6:	f000 f84f 	bl	8000398 <para>
				      andaPouco(1000);
 80002fa:	23fa      	movs	r3, #250	; 0xfa
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 f828 	bl	8000354 <andaPouco>
				      para();
 8000304:	f000 f848 	bl	8000398 <para>
				      gira90();
 8000308:	f000 f85c 	bl	80003c4 <gira90>
				      anda();
 800030c:	f000 f804 	bl	8000318 <anda>
	}
}
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <anda>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void anda(void){
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
	//velocidade do motor(NÃO DEFINIDA)
		int vm = 1500;
 800031e:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <anda+0x30>)
 8000320:	607b      	str	r3, [r7, #4]
		//motor 1
		TIM1->CCR3=vm;
 8000322:	4b0a      	ldr	r3, [pc, #40]	; (800034c <anda+0x34>)
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR2=0;
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <anda+0x34>)
 800032a:	2200      	movs	r2, #0
 800032c:	639a      	str	r2, [r3, #56]	; 0x38
		//motor2
		TIM1->CCR1 = vm;
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <anda+0x34>)
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 0;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <anda+0x38>)
 8000336:	2200      	movs	r2, #0
 8000338:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(10);
 800033a:	200a      	movs	r0, #10
 800033c:	f000 fc1a 	bl	8000b74 <HAL_Delay>
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}
 8000348:	000005dc 	.word	0x000005dc
 800034c:	40012c00 	.word	0x40012c00
 8000350:	40000400 	.word	0x40000400

08000354 <andaPouco>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void andaPouco(int time){
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	//velocidade do motor(NÃO DEFINIDA)
		int vm = 1500;
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <andaPouco+0x38>)
 800035e:	60fb      	str	r3, [r7, #12]
		//motor 1
		TIM1->CCR3=vm;
 8000360:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <andaPouco+0x3c>)
 8000362:	68fa      	ldr	r2, [r7, #12]
 8000364:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR2=0;
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <andaPouco+0x3c>)
 8000368:	2200      	movs	r2, #0
 800036a:	639a      	str	r2, [r3, #56]	; 0x38
		//motor2
		TIM1->CCR1 = vm;
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <andaPouco+0x3c>)
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 0;
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <andaPouco+0x40>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(time);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	0018      	movs	r0, r3
 800037c:	f000 fbfa 	bl	8000b74 <HAL_Delay>
		para();
 8000380:	f000 f80a 	bl	8000398 <para>
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b004      	add	sp, #16
 800038a:	bd80      	pop	{r7, pc}
 800038c:	000005dc 	.word	0x000005dc
 8000390:	40012c00 	.word	0x40012c00
 8000394:	40000400 	.word	0x40000400

08000398 <para>:
/**
  * @brief  para
  * @retval int
  */
void para(void){
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
		//motor 1
		TIM1->CCR3=0;
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <para+0x24>)
 800039e:	2200      	movs	r2, #0
 80003a0:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR2=0;
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <para+0x24>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	639a      	str	r2, [r3, #56]	; 0x38
		//motor2
		TIM1->CCR1 = 0;
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <para+0x24>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 0;
 80003ae:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <para+0x28>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	40012c00 	.word	0x40012c00
 80003c0:	40000400 	.word	0x40000400

080003c4 <gira90>:

void gira90(void){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
	//velocidade de curva do motor(NÃO DEFINIDA)
		int vcurva = 1500;
 80003ca:	4b13      	ldr	r3, [pc, #76]	; (8000418 <gira90+0x54>)
 80003cc:	607b      	str	r3, [r7, #4]
	//tempo de curva do motor(NÃO DEFINIDO)
		int tvirada = 1200;
 80003ce:	2396      	movs	r3, #150	; 0x96
 80003d0:	00db      	lsls	r3, r3, #3
 80003d2:	603b      	str	r3, [r7, #0]
	//motor 1 motor esquerda
		TIM1->CCR3 = 0;
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <gira90+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR2 = vcurva;
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <gira90+0x58>)
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	639a      	str	r2, [r3, #56]	; 0x38
	//motor2 motor da direita
		TIM1->CCR1 = vcurva;
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <gira90+0x58>)
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 0;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <gira90+0x5c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(tvirada);
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	0018      	movs	r0, r3
 80003f0:	f000 fbc0 	bl	8000b74 <HAL_Delay>
		para();
 80003f4:	f7ff ffd0 	bl	8000398 <para>
	//tempo necessario para a curva
	//verificando se passagem está livre
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1){
 80003f8:	2390      	movs	r3, #144	; 0x90
 80003fa:	05db      	lsls	r3, r3, #23
 80003fc:	2102      	movs	r1, #2
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 fe00 	bl	8001004 <HAL_GPIO_ReadPin>
 8000404:	0003      	movs	r3, r0
 8000406:	2b01      	cmp	r3, #1
 8000408:	d101      	bne.n	800040e <gira90+0x4a>
			gira180();
 800040a:	f000 f83b 	bl	8000484 <gira180>
		}
}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	b002      	add	sp, #8
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	000005dc 	.word	0x000005dc
 800041c:	40012c00 	.word	0x40012c00
 8000420:	40000400 	.word	0x40000400

08000424 <gira90Nega>:
void gira90Nega(void){
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
	//velocidade de curva do motor(NÃO DEFINIDA)
			int vcurva = 1500;
 800042a:	4b13      	ldr	r3, [pc, #76]	; (8000478 <gira90Nega+0x54>)
 800042c:	607b      	str	r3, [r7, #4]
		//tempo de curva do motor(NÃO DEFINIDO)
			int tvirada = 1200;
 800042e:	2396      	movs	r3, #150	; 0x96
 8000430:	00db      	lsls	r3, r3, #3
 8000432:	603b      	str	r3, [r7, #0]
		//motor 1 motor esquerda
			TIM1->CCR3 = vcurva;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <gira90Nega+0x58>)
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR2 = 0;
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <gira90Nega+0x58>)
 800043c:	2200      	movs	r2, #0
 800043e:	639a      	str	r2, [r3, #56]	; 0x38
		//motor2 motor da direita
			TIM1->CCR1 = 0;
 8000440:	4b0e      	ldr	r3, [pc, #56]	; (800047c <gira90Nega+0x58>)
 8000442:	2200      	movs	r2, #0
 8000444:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR1 = vcurva;
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <gira90Nega+0x5c>)
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(tvirada);
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	0018      	movs	r0, r3
 8000450:	f000 fb90 	bl	8000b74 <HAL_Delay>
			para();	//verificando se passagem está livre
 8000454:	f7ff ffa0 	bl	8000398 <para>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1){
 8000458:	2390      	movs	r3, #144	; 0x90
 800045a:	05db      	lsls	r3, r3, #23
 800045c:	2102      	movs	r1, #2
 800045e:	0018      	movs	r0, r3
 8000460:	f000 fdd0 	bl	8001004 <HAL_GPIO_ReadPin>
 8000464:	0003      	movs	r3, r0
 8000466:	2b01      	cmp	r3, #1
 8000468:	d101      	bne.n	800046e <gira90Nega+0x4a>
			gira180();
 800046a:	f000 f80b 	bl	8000484 <gira180>
		}
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b002      	add	sp, #8
 8000474:	bd80      	pop	{r7, pc}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	000005dc 	.word	0x000005dc
 800047c:	40012c00 	.word	0x40012c00
 8000480:	40000400 	.word	0x40000400

08000484 <gira180>:
/**
  * @brief  Função para virar 90 graus,
  * tomando como padrao o lado esquerdo
  * @retval void
  */
void gira180(void){
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
	//velocidade de curva do motor(NÃO DEFINIDA)
		int vcurva = 1500;
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <gira180+0x54>)
 800048c:	607b      	str	r3, [r7, #4]
	//tempo de curva do motor(NÃO DEFINIDO)
		int tvirada = 2000;
 800048e:	23fa      	movs	r3, #250	; 0xfa
 8000490:	00db      	lsls	r3, r3, #3
 8000492:	603b      	str	r3, [r7, #0]
	//motor 1
		TIM1->CCR3 = vcurva;
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <gira180+0x58>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR2 = 0;
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <gira180+0x58>)
 800049c:	2200      	movs	r2, #0
 800049e:	639a      	str	r2, [r3, #56]	; 0x38
	//motor2
		TIM1->CCR1 = 0;
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <gira180+0x58>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = vcurva;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <gira180+0x5c>)
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	635a      	str	r2, [r3, #52]	; 0x34
	//tempo necessario para a curva
		HAL_Delay(2*tvirada);
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 fb5f 	bl	8000b74 <HAL_Delay>
		//parando motor
		para();
 80004b6:	f7ff ff6f 	bl	8000398 <para>
	//verificando se passagem está livre
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1){
 80004ba:	2390      	movs	r3, #144	; 0x90
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	2102      	movs	r1, #2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fd9f 	bl	8001004 <HAL_GPIO_ReadPin>
 80004c6:	0003      	movs	r3, r0
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d101      	bne.n	80004d0 <gira180+0x4c>
			desliga();
 80004cc:	f000 f80a 	bl	80004e4 <desliga>
		}
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	000005dc 	.word	0x000005dc
 80004dc:	40012c00 	.word	0x40012c00
 80004e0:	40000400 	.word	0x40000400

080004e4 <desliga>:
/**
  * @brief  desligando
  * @retval int
  */
void desliga(){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	//motor 1
		TIM1->CCR3 = 0;
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <desliga+0x24>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR2 = 0;
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <desliga+0x24>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	639a      	str	r2, [r3, #56]	; 0x38
	//motor2
		TIM1->CCR1 = 0;
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <desliga+0x24>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR1 = 0;
 80004fa:	4b04      	ldr	r3, [pc, #16]	; (800050c <desliga+0x28>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	635a      	str	r2, [r3, #52]	; 0x34
	//desligar vassourinhas e o aspirador;
		//
		//
		//
}
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	40012c00 	.word	0x40012c00
 800050c:	40000400 	.word	0x40000400

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b091      	sub	sp, #68	; 0x44
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	2410      	movs	r4, #16
 8000518:	193b      	adds	r3, r7, r4
 800051a:	0018      	movs	r0, r3
 800051c:	2330      	movs	r3, #48	; 0x30
 800051e:	001a      	movs	r2, r3
 8000520:	2100      	movs	r1, #0
 8000522:	f002 f89d 	bl	8002660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000526:	003b      	movs	r3, r7
 8000528:	0018      	movs	r0, r3
 800052a:	2310      	movs	r3, #16
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f002 f896 	bl	8002660 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000534:	0021      	movs	r1, r4
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2202      	movs	r2, #2
 800053a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2201      	movs	r2, #1
 8000540:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2210      	movs	r2, #16
 8000546:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	187b      	adds	r3, r7, r1
 8000550:	0018      	movs	r0, r3
 8000552:	f000 fd75 	bl	8001040 <HAL_RCC_OscConfig>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800055a:	f000 f975 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	003b      	movs	r3, r7
 8000560:	2207      	movs	r2, #7
 8000562:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000564:	003b      	movs	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	003b      	movs	r3, r7
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000570:	003b      	movs	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000576:	003b      	movs	r3, r7
 8000578:	2100      	movs	r1, #0
 800057a:	0018      	movs	r0, r3
 800057c:	f001 f87e 	bl	800167c <HAL_RCC_ClockConfig>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000584:	f000 f960 	bl	8000848 <Error_Handler>
  }
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	b011      	add	sp, #68	; 0x44
 800058e:	bd90      	pop	{r4, r7, pc}

08000590 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b096      	sub	sp, #88	; 0x58
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000596:	2348      	movs	r3, #72	; 0x48
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	0018      	movs	r0, r3
 800059c:	2310      	movs	r3, #16
 800059e:	001a      	movs	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	f002 f85d 	bl	8002660 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a6:	2340      	movs	r3, #64	; 0x40
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	0018      	movs	r0, r3
 80005ac:	2308      	movs	r3, #8
 80005ae:	001a      	movs	r2, r3
 80005b0:	2100      	movs	r1, #0
 80005b2:	f002 f855 	bl	8002660 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b6:	2324      	movs	r3, #36	; 0x24
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	0018      	movs	r0, r3
 80005bc:	231c      	movs	r3, #28
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f002 f84d 	bl	8002660 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	0018      	movs	r0, r3
 80005ca:	2320      	movs	r3, #32
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f002 f846 	bl	8002660 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005d4:	4b51      	ldr	r3, [pc, #324]	; (800071c <MX_TIM1_Init+0x18c>)
 80005d6:	4a52      	ldr	r2, [pc, #328]	; (8000720 <MX_TIM1_Init+0x190>)
 80005d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 80005da:	4b50      	ldr	r3, [pc, #320]	; (800071c <MX_TIM1_Init+0x18c>)
 80005dc:	2207      	movs	r2, #7
 80005de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e0:	4b4e      	ldr	r3, [pc, #312]	; (800071c <MX_TIM1_Init+0x18c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 80005e6:	4b4d      	ldr	r3, [pc, #308]	; (800071c <MX_TIM1_Init+0x18c>)
 80005e8:	4a4e      	ldr	r2, [pc, #312]	; (8000724 <MX_TIM1_Init+0x194>)
 80005ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ec:	4b4b      	ldr	r3, [pc, #300]	; (800071c <MX_TIM1_Init+0x18c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005f2:	4b4a      	ldr	r3, [pc, #296]	; (800071c <MX_TIM1_Init+0x18c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f8:	4b48      	ldr	r3, [pc, #288]	; (800071c <MX_TIM1_Init+0x18c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005fe:	4b47      	ldr	r3, [pc, #284]	; (800071c <MX_TIM1_Init+0x18c>)
 8000600:	0018      	movs	r0, r3
 8000602:	f001 f96f 	bl	80018e4 <HAL_TIM_Base_Init>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800060a:	f000 f91d 	bl	8000848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060e:	2148      	movs	r1, #72	; 0x48
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	0152      	lsls	r2, r2, #5
 8000616:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000618:	187a      	adds	r2, r7, r1
 800061a:	4b40      	ldr	r3, [pc, #256]	; (800071c <MX_TIM1_Init+0x18c>)
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f001 fb6c 	bl	8001cfc <HAL_TIM_ConfigClockSource>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000628:	f000 f90e 	bl	8000848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800062c:	4b3b      	ldr	r3, [pc, #236]	; (800071c <MX_TIM1_Init+0x18c>)
 800062e:	0018      	movs	r0, r3
 8000630:	f001 f9a8 	bl	8001984 <HAL_TIM_PWM_Init>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000638:	f000 f906 	bl	8000848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800063c:	2140      	movs	r1, #64	; 0x40
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800064a:	187a      	adds	r2, r7, r1
 800064c:	4b33      	ldr	r3, [pc, #204]	; (800071c <MX_TIM1_Init+0x18c>)
 800064e:	0011      	movs	r1, r2
 8000650:	0018      	movs	r0, r3
 8000652:	f001 ff31 	bl	80024b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800065a:	f000 f8f5 	bl	8000848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800065e:	2124      	movs	r1, #36	; 0x24
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2260      	movs	r2, #96	; 0x60
 8000664:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800068a:	1879      	adds	r1, r7, r1
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <MX_TIM1_Init+0x18c>)
 800068e:	2200      	movs	r2, #0
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fa6d 	bl	8001b70 <HAL_TIM_PWM_ConfigChannel>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800069a:	f000 f8d5 	bl	8000848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800069e:	2324      	movs	r3, #36	; 0x24
 80006a0:	18f9      	adds	r1, r7, r3
 80006a2:	4b1e      	ldr	r3, [pc, #120]	; (800071c <MX_TIM1_Init+0x18c>)
 80006a4:	2204      	movs	r2, #4
 80006a6:	0018      	movs	r0, r3
 80006a8:	f001 fa62 	bl	8001b70 <HAL_TIM_PWM_ConfigChannel>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80006b0:	f000 f8ca 	bl	8000848 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006b4:	2324      	movs	r3, #36	; 0x24
 80006b6:	18f9      	adds	r1, r7, r3
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_TIM1_Init+0x18c>)
 80006ba:	2208      	movs	r2, #8
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 fa57 	bl	8001b70 <HAL_TIM_PWM_ConfigChannel>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80006c6:	f000 f8bf 	bl	8000848 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	0192      	lsls	r2, r2, #6
 80006ee:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006f6:	1d3a      	adds	r2, r7, #4
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_TIM1_Init+0x18c>)
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 ff2d 	bl	800255c <HAL_TIMEx_ConfigBreakDeadTime>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000706:	f000 f89f 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800070a:	4b04      	ldr	r3, [pc, #16]	; (800071c <MX_TIM1_Init+0x18c>)
 800070c:	0018      	movs	r0, r3
 800070e:	f000 f903 	bl	8000918 <HAL_TIM_MspPostInit>

}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b016      	add	sp, #88	; 0x58
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	20000028 	.word	0x20000028
 8000720:	40012c00 	.word	0x40012c00
 8000724:	000007cf 	.word	0x000007cf

08000728 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072e:	2320      	movs	r3, #32
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	0018      	movs	r0, r3
 8000734:	2308      	movs	r3, #8
 8000736:	001a      	movs	r2, r3
 8000738:	2100      	movs	r1, #0
 800073a:	f001 ff91 	bl	8002660 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	0018      	movs	r0, r3
 8000742:	231c      	movs	r3, #28
 8000744:	001a      	movs	r2, r3
 8000746:	2100      	movs	r1, #0
 8000748:	f001 ff8a 	bl	8002660 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_TIM3_Init+0xb8>)
 800074e:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <MX_TIM3_Init+0xbc>)
 8000750:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <MX_TIM3_Init+0xb8>)
 8000754:	2207      	movs	r2, #7
 8000756:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_TIM3_Init+0xb8>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_TIM3_Init+0xb8>)
 8000760:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <MX_TIM3_Init+0xc0>)
 8000762:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_TIM3_Init+0xb8>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_TIM3_Init+0xb8>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_TIM3_Init+0xb8>)
 8000772:	0018      	movs	r0, r3
 8000774:	f001 f906 	bl	8001984 <HAL_TIM_PWM_Init>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800077c:	f000 f864 	bl	8000848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000780:	2120      	movs	r1, #32
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800078e:	187a      	adds	r2, r7, r1
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_TIM3_Init+0xb8>)
 8000792:	0011      	movs	r1, r2
 8000794:	0018      	movs	r0, r3
 8000796:	f001 fe8f 	bl	80024b8 <HAL_TIMEx_MasterConfigSynchronization>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800079e:	f000 f853 	bl	8000848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2260      	movs	r2, #96	; 0x60
 80007a6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ba:	1d39      	adds	r1, r7, #4
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_TIM3_Init+0xb8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	0018      	movs	r0, r3
 80007c2:	f001 f9d5 	bl	8001b70 <HAL_TIM_PWM_ConfigChannel>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80007ca:	f000 f83d 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <MX_TIM3_Init+0xb8>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 f8a1 	bl	8000918 <HAL_TIM_MspPostInit>

}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b00a      	add	sp, #40	; 0x28
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	20000070 	.word	0x20000070
 80007e4:	40000400 	.word	0x40000400
 80007e8:	000007cf 	.word	0x000007cf

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	0018      	movs	r0, r3
 80007f6:	2314      	movs	r3, #20
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f001 ff30 	bl	8002660 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_GPIO_Init+0x58>)
 8000802:	695a      	ldr	r2, [r3, #20]
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_GPIO_Init+0x58>)
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	0289      	lsls	r1, r1, #10
 800080a:	430a      	orrs	r2, r1
 800080c:	615a      	str	r2, [r3, #20]
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <MX_GPIO_Init+0x58>)
 8000810:	695a      	ldr	r2, [r3, #20]
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	029b      	lsls	r3, r3, #10
 8000816:	4013      	ands	r3, r2
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2207      	movs	r2, #7
 8000820:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2202      	movs	r2, #2
 800082c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	2390      	movs	r3, #144	; 0x90
 8000832:	05db      	lsls	r3, r3, #23
 8000834:	0011      	movs	r1, r2
 8000836:	0018      	movs	r0, r3
 8000838:	f000 fa74 	bl	8000d24 <HAL_GPIO_Init>

}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b006      	add	sp, #24
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40021000 	.word	0x40021000

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x44>)
 800085c:	699a      	ldr	r2, [r3, #24]
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <HAL_MspInit+0x44>)
 8000860:	2101      	movs	r1, #1
 8000862:	430a      	orrs	r2, r1
 8000864:	619a      	str	r2, [r3, #24]
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x44>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	2201      	movs	r2, #1
 800086c:	4013      	ands	r3, r2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_MspInit+0x44>)
 8000874:	69da      	ldr	r2, [r3, #28]
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_MspInit+0x44>)
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	0549      	lsls	r1, r1, #21
 800087c:	430a      	orrs	r2, r1
 800087e:	61da      	str	r2, [r3, #28]
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_MspInit+0x44>)
 8000882:	69da      	ldr	r2, [r3, #28]
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	055b      	lsls	r3, r3, #21
 8000888:	4013      	ands	r3, r2
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b002      	add	sp, #8
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	40021000 	.word	0x40021000

0800089c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <HAL_TIM_Base_MspInit+0x38>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d10d      	bne.n	80008ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_TIM_Base_MspInit+0x3c>)
 80008b0:	699a      	ldr	r2, [r3, #24]
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_TIM_Base_MspInit+0x3c>)
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	0109      	lsls	r1, r1, #4
 80008b8:	430a      	orrs	r2, r1
 80008ba:	619a      	str	r2, [r3, #24]
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_TIM_Base_MspInit+0x3c>)
 80008be:	699a      	ldr	r2, [r3, #24]
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	4013      	ands	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b004      	add	sp, #16
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	40012c00 	.word	0x40012c00
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a09      	ldr	r2, [pc, #36]	; (8000910 <HAL_TIM_PWM_MspInit+0x34>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d10b      	bne.n	8000906 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <HAL_TIM_PWM_MspInit+0x38>)
 80008f0:	69da      	ldr	r2, [r3, #28]
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_TIM_PWM_MspInit+0x38>)
 80008f4:	2102      	movs	r1, #2
 80008f6:	430a      	orrs	r2, r1
 80008f8:	61da      	str	r2, [r3, #28]
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_TIM_PWM_MspInit+0x38>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	2202      	movs	r2, #2
 8000900:	4013      	ands	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b004      	add	sp, #16
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	40000400 	.word	0x40000400
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b08b      	sub	sp, #44	; 0x2c
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	2414      	movs	r4, #20
 8000922:	193b      	adds	r3, r7, r4
 8000924:	0018      	movs	r0, r3
 8000926:	2314      	movs	r3, #20
 8000928:	001a      	movs	r2, r3
 800092a:	2100      	movs	r1, #0
 800092c:	f001 fe98 	bl	8002660 <memset>
  if(htim->Instance==TIM1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a2b      	ldr	r2, [pc, #172]	; (80009e4 <HAL_TIM_MspPostInit+0xcc>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d126      	bne.n	8000988 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <HAL_TIM_MspPostInit+0xd0>)
 800093c:	695a      	ldr	r2, [r3, #20]
 800093e:	4b2a      	ldr	r3, [pc, #168]	; (80009e8 <HAL_TIM_MspPostInit+0xd0>)
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	0289      	lsls	r1, r1, #10
 8000944:	430a      	orrs	r2, r1
 8000946:	615a      	str	r2, [r3, #20]
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <HAL_TIM_MspPostInit+0xd0>)
 800094a:	695a      	ldr	r2, [r3, #20]
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	029b      	lsls	r3, r3, #10
 8000950:	4013      	ands	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	22d0      	movs	r2, #208	; 0xd0
 800095a:	00d2      	lsls	r2, r2, #3
 800095c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	0021      	movs	r1, r4
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2202      	movs	r2, #2
 8000964:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2202      	movs	r2, #2
 8000976:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	187a      	adds	r2, r7, r1
 800097a:	2390      	movs	r3, #144	; 0x90
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	0011      	movs	r1, r2
 8000980:	0018      	movs	r0, r3
 8000982:	f000 f9cf 	bl	8000d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000986:	e029      	b.n	80009dc <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM3)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a17      	ldr	r2, [pc, #92]	; (80009ec <HAL_TIM_MspPostInit+0xd4>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d124      	bne.n	80009dc <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_TIM_MspPostInit+0xd0>)
 8000994:	695a      	ldr	r2, [r3, #20]
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_TIM_MspPostInit+0xd0>)
 8000998:	2180      	movs	r1, #128	; 0x80
 800099a:	0289      	lsls	r1, r1, #10
 800099c:	430a      	orrs	r2, r1
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_TIM_MspPostInit+0xd0>)
 80009a2:	695a      	ldr	r2, [r3, #20]
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	029b      	lsls	r3, r3, #10
 80009a8:	4013      	ands	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009ae:	2114      	movs	r1, #20
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2240      	movs	r2, #64	; 0x40
 80009b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2202      	movs	r2, #2
 80009ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2201      	movs	r2, #1
 80009cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	187a      	adds	r2, r7, r1
 80009d0:	2390      	movs	r3, #144	; 0x90
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 f9a4 	bl	8000d24 <HAL_GPIO_Init>
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b00b      	add	sp, #44	; 0x2c
 80009e2:	bd90      	pop	{r4, r7, pc}
 80009e4:	40012c00 	.word	0x40012c00
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40000400 	.word	0x40000400

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f000 f892 	bl	8000b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8000a28:	4813      	ldr	r0, [pc, #76]	; (8000a78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a2a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000a2c:	4813      	ldr	r0, [pc, #76]	; (8000a7c <LoopForever+0x6>)
    LDR R1, [R0]
 8000a2e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000a30:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000a32:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <LoopForever+0xa>)
    CMP R1, R2
 8000a34:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000a36:	d105      	bne.n	8000a44 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000a38:	4812      	ldr	r0, [pc, #72]	; (8000a84 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a3a:	4913      	ldr	r1, [pc, #76]	; (8000a88 <LoopForever+0x12>)
    STR R1, [R0]
 8000a3c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a3e:	4813      	ldr	r0, [pc, #76]	; (8000a8c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a40:	4913      	ldr	r1, [pc, #76]	; (8000a90 <LoopForever+0x1a>)
    STR R1, [R0]
 8000a42:	6001      	str	r1, [r0, #0]

08000a44 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	4813      	ldr	r0, [pc, #76]	; (8000a94 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000a46:	4914      	ldr	r1, [pc, #80]	; (8000a98 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000a48:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <LoopForever+0x26>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000a5c:	4c11      	ldr	r4, [pc, #68]	; (8000aa4 <LoopForever+0x2e>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a6a:	f7ff ffd8 	bl	8000a1e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a6e:	f001 fdd3 	bl	8002618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a72:	f7ff fbd5 	bl	8000220 <main>

08000a76 <LoopForever>:

LoopForever:
    b LoopForever
 8000a76:	e7fe      	b.n	8000a76 <LoopForever>
  ldr   r0, =_estack
 8000a78:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000a7c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a80:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000a84:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000a88:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a8c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a90:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a9c:	080026c0 	.word	0x080026c0
  ldr r2, =_sbss
 8000aa0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aa4:	200000bc 	.word	0x200000bc

08000aa8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_IRQHandler>
	...

08000aac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <HAL_Init+0x24>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_Init+0x24>)
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 f809 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac2:	f7ff fec7 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	0018      	movs	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	40022000 	.word	0x40022000

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_InitTick+0x5c>)
 8000ade:	681c      	ldr	r4, [r3, #0]
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_InitTick+0x60>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	23fa      	movs	r3, #250	; 0xfa
 8000ae8:	0098      	lsls	r0, r3, #2
 8000aea:	f7ff fb0d 	bl	8000108 <__udivsi3>
 8000aee:	0003      	movs	r3, r0
 8000af0:	0019      	movs	r1, r3
 8000af2:	0020      	movs	r0, r4
 8000af4:	f7ff fb08 	bl	8000108 <__udivsi3>
 8000af8:	0003      	movs	r3, r0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 f905 	bl	8000d0a <HAL_SYSTICK_Config>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e00f      	b.n	8000b28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d80b      	bhi.n	8000b26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	2301      	movs	r3, #1
 8000b12:	425b      	negs	r3, r3
 8000b14:	2200      	movs	r2, #0
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 f8e2 	bl	8000ce0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_InitTick+0x64>)
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b003      	add	sp, #12
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x1c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	001a      	movs	r2, r3
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x20>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	18d2      	adds	r2, r2, r3
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_IncTick+0x20>)
 8000b4e:	601a      	str	r2, [r3, #0]
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	200000b8 	.word	0x200000b8

08000b60 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <HAL_GetTick+0x10>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	200000b8 	.word	0x200000b8

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff fff0 	bl	8000b60 <HAL_GetTick>
 8000b80:	0003      	movs	r3, r0
 8000b82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_Delay+0x44>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	001a      	movs	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	189b      	adds	r3, r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	f7ff ffe0 	bl	8000b60 <HAL_GetTick>
 8000ba0:	0002      	movs	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b004      	add	sp, #16
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	20000008 	.word	0x20000008

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd0:	d828      	bhi.n	8000c24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd2:	4a2f      	ldr	r2, [pc, #188]	; (8000c90 <__NVIC_SetPriority+0xd4>)
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	33c0      	adds	r3, #192	; 0xc0
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	589b      	ldr	r3, [r3, r2]
 8000be2:	1dfa      	adds	r2, r7, #7
 8000be4:	7812      	ldrb	r2, [r2, #0]
 8000be6:	0011      	movs	r1, r2
 8000be8:	2203      	movs	r2, #3
 8000bea:	400a      	ands	r2, r1
 8000bec:	00d2      	lsls	r2, r2, #3
 8000bee:	21ff      	movs	r1, #255	; 0xff
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	43d2      	mvns	r2, r2
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	22ff      	movs	r2, #255	; 0xff
 8000c00:	401a      	ands	r2, r3
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	0018      	movs	r0, r3
 8000c08:	2303      	movs	r3, #3
 8000c0a:	4003      	ands	r3, r0
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c10:	481f      	ldr	r0, [pc, #124]	; (8000c90 <__NVIC_SetPriority+0xd4>)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	33c0      	adds	r3, #192	; 0xc0
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c22:	e031      	b.n	8000c88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c24:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <__NVIC_SetPriority+0xd8>)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	400b      	ands	r3, r1
 8000c30:	3b08      	subs	r3, #8
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	3306      	adds	r3, #6
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	18d3      	adds	r3, r2, r3
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1dfa      	adds	r2, r7, #7
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	0011      	movs	r1, r2
 8000c44:	2203      	movs	r2, #3
 8000c46:	400a      	ands	r2, r1
 8000c48:	00d2      	lsls	r2, r2, #3
 8000c4a:	21ff      	movs	r1, #255	; 0xff
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	000a      	movs	r2, r1
 8000c50:	43d2      	mvns	r2, r2
 8000c52:	401a      	ands	r2, r3
 8000c54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	019b      	lsls	r3, r3, #6
 8000c5a:	22ff      	movs	r2, #255	; 0xff
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	0018      	movs	r0, r3
 8000c64:	2303      	movs	r3, #3
 8000c66:	4003      	ands	r3, r0
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <__NVIC_SetPriority+0xd8>)
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	001c      	movs	r4, r3
 8000c74:	230f      	movs	r3, #15
 8000c76:	4023      	ands	r3, r4
 8000c78:	3b08      	subs	r3, #8
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	3306      	adds	r3, #6
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	18c3      	adds	r3, r0, r3
 8000c84:	3304      	adds	r3, #4
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b003      	add	sp, #12
 8000c8e:	bd90      	pop	{r4, r7, pc}
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	1e5a      	subs	r2, r3, #1
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	045b      	lsls	r3, r3, #17
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d301      	bcc.n	8000cb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cac:	2301      	movs	r3, #1
 8000cae:	e010      	b.n	8000cd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <SysTick_Config+0x44>)
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	3a01      	subs	r2, #1
 8000cb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb8:	2301      	movs	r3, #1
 8000cba:	425b      	negs	r3, r3
 8000cbc:	2103      	movs	r1, #3
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff ff7c 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <SysTick_Config+0x44>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <SysTick_Config+0x44>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	210f      	movs	r1, #15
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	1c02      	adds	r2, r0, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b004      	add	sp, #16
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff ffbf 	bl	8000c98 <SysTick_Config>
 8000d1a:	0003      	movs	r3, r0
}
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d32:	e14f      	b.n	8000fd4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2101      	movs	r1, #1
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4091      	lsls	r1, r2
 8000d3e:	000a      	movs	r2, r1
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d100      	bne.n	8000d4c <HAL_GPIO_Init+0x28>
 8000d4a:	e140      	b.n	8000fce <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2203      	movs	r2, #3
 8000d52:	4013      	ands	r3, r2
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d005      	beq.n	8000d64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d130      	bne.n	8000dc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	409a      	lsls	r2, r3
 8000d72:	0013      	movs	r3, r2
 8000d74:	43da      	mvns	r2, r3
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	409a      	lsls	r2, r3
 8000d86:	0013      	movs	r3, r2
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	091b      	lsrs	r3, r3, #4
 8000db0:	2201      	movs	r2, #1
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2203      	movs	r2, #3
 8000dcc:	4013      	ands	r3, r2
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d017      	beq.n	8000e02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	43da      	mvns	r2, r3
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2203      	movs	r2, #3
 8000e08:	4013      	ands	r3, r2
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d123      	bne.n	8000e56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	08da      	lsrs	r2, r3, #3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3208      	adds	r2, #8
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	58d3      	ldr	r3, [r2, r3]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2207      	movs	r2, #7
 8000e20:	4013      	ands	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	220f      	movs	r2, #15
 8000e26:	409a      	lsls	r2, r3
 8000e28:	0013      	movs	r3, r2
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	691a      	ldr	r2, [r3, #16]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	2107      	movs	r1, #7
 8000e3a:	400b      	ands	r3, r1
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	0013      	movs	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	08da      	lsrs	r2, r3, #3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3208      	adds	r2, #8
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	6939      	ldr	r1, [r7, #16]
 8000e54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	43da      	mvns	r2, r3
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2203      	movs	r2, #3
 8000e74:	401a      	ands	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	23c0      	movs	r3, #192	; 0xc0
 8000e90:	029b      	lsls	r3, r3, #10
 8000e92:	4013      	ands	r3, r2
 8000e94:	d100      	bne.n	8000e98 <HAL_GPIO_Init+0x174>
 8000e96:	e09a      	b.n	8000fce <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e98:	4b54      	ldr	r3, [pc, #336]	; (8000fec <HAL_GPIO_Init+0x2c8>)
 8000e9a:	699a      	ldr	r2, [r3, #24]
 8000e9c:	4b53      	ldr	r3, [pc, #332]	; (8000fec <HAL_GPIO_Init+0x2c8>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	619a      	str	r2, [r3, #24]
 8000ea4:	4b51      	ldr	r3, [pc, #324]	; (8000fec <HAL_GPIO_Init+0x2c8>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4013      	ands	r3, r2
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eb0:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <HAL_GPIO_Init+0x2cc>)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	589b      	ldr	r3, [r3, r2]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	220f      	movs	r2, #15
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	0013      	movs	r3, r2
 8000ecc:	43da      	mvns	r2, r3
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	2390      	movs	r3, #144	; 0x90
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d013      	beq.n	8000f06 <HAL_GPIO_Init+0x1e2>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a44      	ldr	r2, [pc, #272]	; (8000ff4 <HAL_GPIO_Init+0x2d0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d00d      	beq.n	8000f02 <HAL_GPIO_Init+0x1de>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a43      	ldr	r2, [pc, #268]	; (8000ff8 <HAL_GPIO_Init+0x2d4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d007      	beq.n	8000efe <HAL_GPIO_Init+0x1da>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a42      	ldr	r2, [pc, #264]	; (8000ffc <HAL_GPIO_Init+0x2d8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <HAL_GPIO_Init+0x1d6>
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e006      	b.n	8000f08 <HAL_GPIO_Init+0x1e4>
 8000efa:	2305      	movs	r3, #5
 8000efc:	e004      	b.n	8000f08 <HAL_GPIO_Init+0x1e4>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e002      	b.n	8000f08 <HAL_GPIO_Init+0x1e4>
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <HAL_GPIO_Init+0x1e4>
 8000f06:	2300      	movs	r3, #0
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	2103      	movs	r1, #3
 8000f0c:	400a      	ands	r2, r1
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	4093      	lsls	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f18:	4935      	ldr	r1, [pc, #212]	; (8000ff0 <HAL_GPIO_Init+0x2cc>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f26:	4b36      	ldr	r3, [pc, #216]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	025b      	lsls	r3, r3, #9
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f50:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	029b      	lsls	r3, r3, #10
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f74:	4b22      	ldr	r3, [pc, #136]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43da      	mvns	r2, r3
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	2380      	movs	r3, #128	; 0x80
 8000f90:	035b      	lsls	r3, r3, #13
 8000f92:	4013      	ands	r3, r2
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43da      	mvns	r2, r3
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	039b      	lsls	r3, r3, #14
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <HAL_GPIO_Init+0x2dc>)
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	40da      	lsrs	r2, r3
 8000fdc:	1e13      	subs	r3, r2, #0
 8000fde:	d000      	beq.n	8000fe2 <HAL_GPIO_Init+0x2be>
 8000fe0:	e6a8      	b.n	8000d34 <HAL_GPIO_Init+0x10>
  } 
}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b006      	add	sp, #24
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	48000800 	.word	0x48000800
 8000ffc:	48000c00 	.word	0x48000c00
 8001000:	40010400 	.word	0x40010400

08001004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	000a      	movs	r2, r1
 800100e:	1cbb      	adds	r3, r7, #2
 8001010:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	1cba      	adds	r2, r7, #2
 8001018:	8812      	ldrh	r2, [r2, #0]
 800101a:	4013      	ands	r3, r2
 800101c:	d004      	beq.n	8001028 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800101e:	230f      	movs	r3, #15
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
 8001026:	e003      	b.n	8001030 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001028:	230f      	movs	r3, #15
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001030:	230f      	movs	r3, #15
 8001032:	18fb      	adds	r3, r7, r3
 8001034:	781b      	ldrb	r3, [r3, #0]
  }
 8001036:	0018      	movs	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e305      	b.n	800165e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	4013      	ands	r3, r2
 800105a:	d100      	bne.n	800105e <HAL_RCC_OscConfig+0x1e>
 800105c:	e08d      	b.n	800117a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800105e:	4bc5      	ldr	r3, [pc, #788]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	220c      	movs	r2, #12
 8001064:	4013      	ands	r3, r2
 8001066:	2b04      	cmp	r3, #4
 8001068:	d00e      	beq.n	8001088 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800106a:	4bc2      	ldr	r3, [pc, #776]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	220c      	movs	r2, #12
 8001070:	4013      	ands	r3, r2
 8001072:	2b08      	cmp	r3, #8
 8001074:	d116      	bne.n	80010a4 <HAL_RCC_OscConfig+0x64>
 8001076:	4bbf      	ldr	r3, [pc, #764]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	23c0      	movs	r3, #192	; 0xc0
 800107c:	025b      	lsls	r3, r3, #9
 800107e:	401a      	ands	r2, r3
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	025b      	lsls	r3, r3, #9
 8001084:	429a      	cmp	r2, r3
 8001086:	d10d      	bne.n	80010a4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001088:	4bba      	ldr	r3, [pc, #744]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	029b      	lsls	r3, r3, #10
 8001090:	4013      	ands	r3, r2
 8001092:	d100      	bne.n	8001096 <HAL_RCC_OscConfig+0x56>
 8001094:	e070      	b.n	8001178 <HAL_RCC_OscConfig+0x138>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d000      	beq.n	80010a0 <HAL_RCC_OscConfig+0x60>
 800109e:	e06b      	b.n	8001178 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e2dc      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d107      	bne.n	80010bc <HAL_RCC_OscConfig+0x7c>
 80010ac:	4bb1      	ldr	r3, [pc, #708]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4bb0      	ldr	r3, [pc, #704]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	0249      	lsls	r1, r1, #9
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e02f      	b.n	800111c <HAL_RCC_OscConfig+0xdc>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10c      	bne.n	80010de <HAL_RCC_OscConfig+0x9e>
 80010c4:	4bab      	ldr	r3, [pc, #684]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4baa      	ldr	r3, [pc, #680]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80010ca:	49ab      	ldr	r1, [pc, #684]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 80010cc:	400a      	ands	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	4ba8      	ldr	r3, [pc, #672]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4ba7      	ldr	r3, [pc, #668]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80010d6:	49a9      	ldr	r1, [pc, #676]	; (800137c <HAL_RCC_OscConfig+0x33c>)
 80010d8:	400a      	ands	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e01e      	b.n	800111c <HAL_RCC_OscConfig+0xdc>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b05      	cmp	r3, #5
 80010e4:	d10e      	bne.n	8001104 <HAL_RCC_OscConfig+0xc4>
 80010e6:	4ba3      	ldr	r3, [pc, #652]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4ba2      	ldr	r3, [pc, #648]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80010ec:	2180      	movs	r1, #128	; 0x80
 80010ee:	02c9      	lsls	r1, r1, #11
 80010f0:	430a      	orrs	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	4b9f      	ldr	r3, [pc, #636]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b9e      	ldr	r3, [pc, #632]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	0249      	lsls	r1, r1, #9
 80010fe:	430a      	orrs	r2, r1
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	e00b      	b.n	800111c <HAL_RCC_OscConfig+0xdc>
 8001104:	4b9b      	ldr	r3, [pc, #620]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b9a      	ldr	r3, [pc, #616]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 800110a:	499b      	ldr	r1, [pc, #620]	; (8001378 <HAL_RCC_OscConfig+0x338>)
 800110c:	400a      	ands	r2, r1
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	4b98      	ldr	r3, [pc, #608]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b97      	ldr	r3, [pc, #604]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001116:	4999      	ldr	r1, [pc, #612]	; (800137c <HAL_RCC_OscConfig+0x33c>)
 8001118:	400a      	ands	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d014      	beq.n	800114e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fd1c 	bl	8000b60 <HAL_GetTick>
 8001128:	0003      	movs	r3, r0
 800112a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112e:	f7ff fd17 	bl	8000b60 <HAL_GetTick>
 8001132:	0002      	movs	r2, r0
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b64      	cmp	r3, #100	; 0x64
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e28e      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001140:	4b8c      	ldr	r3, [pc, #560]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	029b      	lsls	r3, r3, #10
 8001148:	4013      	ands	r3, r2
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0xee>
 800114c:	e015      	b.n	800117a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff fd07 	bl	8000b60 <HAL_GetTick>
 8001152:	0003      	movs	r3, r0
 8001154:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fd02 	bl	8000b60 <HAL_GetTick>
 800115c:	0002      	movs	r2, r0
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e279      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	4b82      	ldr	r3, [pc, #520]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	029b      	lsls	r3, r3, #10
 8001172:	4013      	ands	r3, r2
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x118>
 8001176:	e000      	b.n	800117a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2202      	movs	r2, #2
 8001180:	4013      	ands	r3, r2
 8001182:	d100      	bne.n	8001186 <HAL_RCC_OscConfig+0x146>
 8001184:	e06c      	b.n	8001260 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001186:	4b7b      	ldr	r3, [pc, #492]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	220c      	movs	r2, #12
 800118c:	4013      	ands	r3, r2
 800118e:	d00e      	beq.n	80011ae <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001190:	4b78      	ldr	r3, [pc, #480]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	220c      	movs	r2, #12
 8001196:	4013      	ands	r3, r2
 8001198:	2b08      	cmp	r3, #8
 800119a:	d11f      	bne.n	80011dc <HAL_RCC_OscConfig+0x19c>
 800119c:	4b75      	ldr	r3, [pc, #468]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	23c0      	movs	r3, #192	; 0xc0
 80011a2:	025b      	lsls	r3, r3, #9
 80011a4:	401a      	ands	r2, r3
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d116      	bne.n	80011dc <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ae:	4b71      	ldr	r3, [pc, #452]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2202      	movs	r2, #2
 80011b4:	4013      	ands	r3, r2
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_OscConfig+0x184>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d001      	beq.n	80011c4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e24c      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c4:	4b6b      	ldr	r3, [pc, #428]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	22f8      	movs	r2, #248	; 0xf8
 80011ca:	4393      	bics	r3, r2
 80011cc:	0019      	movs	r1, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	00da      	lsls	r2, r3, #3
 80011d4:	4b67      	ldr	r3, [pc, #412]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80011d6:	430a      	orrs	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011da:	e041      	b.n	8001260 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d024      	beq.n	800122e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e4:	4b63      	ldr	r3, [pc, #396]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b62      	ldr	r3, [pc, #392]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	430a      	orrs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fcb6 	bl	8000b60 <HAL_GetTick>
 80011f4:	0003      	movs	r3, r0
 80011f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fcb1 	bl	8000b60 <HAL_GetTick>
 80011fe:	0002      	movs	r2, r0
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e228      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	4b59      	ldr	r3, [pc, #356]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2202      	movs	r2, #2
 8001212:	4013      	ands	r3, r2
 8001214:	d0f1      	beq.n	80011fa <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	4b57      	ldr	r3, [pc, #348]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	22f8      	movs	r2, #248	; 0xf8
 800121c:	4393      	bics	r3, r2
 800121e:	0019      	movs	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	00da      	lsls	r2, r3, #3
 8001226:	4b53      	ldr	r3, [pc, #332]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001228:	430a      	orrs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	e018      	b.n	8001260 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122e:	4b51      	ldr	r3, [pc, #324]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4b50      	ldr	r3, [pc, #320]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001234:	2101      	movs	r1, #1
 8001236:	438a      	bics	r2, r1
 8001238:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff fc91 	bl	8000b60 <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001244:	f7ff fc8c 	bl	8000b60 <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e203      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2202      	movs	r2, #2
 800125c:	4013      	ands	r3, r2
 800125e:	d1f1      	bne.n	8001244 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2208      	movs	r2, #8
 8001266:	4013      	ands	r3, r2
 8001268:	d036      	beq.n	80012d8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d019      	beq.n	80012a6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001272:	4b40      	ldr	r3, [pc, #256]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001276:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001278:	2101      	movs	r1, #1
 800127a:	430a      	orrs	r2, r1
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127e:	f7ff fc6f 	bl	8000b60 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001288:	f7ff fc6a 	bl	8000b60 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e1e1      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	4b36      	ldr	r3, [pc, #216]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	2202      	movs	r2, #2
 80012a0:	4013      	ands	r3, r2
 80012a2:	d0f1      	beq.n	8001288 <HAL_RCC_OscConfig+0x248>
 80012a4:	e018      	b.n	80012d8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a6:	4b33      	ldr	r3, [pc, #204]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80012a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012aa:	4b32      	ldr	r3, [pc, #200]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80012ac:	2101      	movs	r1, #1
 80012ae:	438a      	bics	r2, r1
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fc55 	bl	8000b60 <HAL_GetTick>
 80012b6:	0003      	movs	r3, r0
 80012b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012bc:	f7ff fc50 	bl	8000b60 <HAL_GetTick>
 80012c0:	0002      	movs	r2, r0
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e1c7      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ce:	4b29      	ldr	r3, [pc, #164]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	2202      	movs	r2, #2
 80012d4:	4013      	ands	r3, r2
 80012d6:	d1f1      	bne.n	80012bc <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2204      	movs	r2, #4
 80012de:	4013      	ands	r3, r2
 80012e0:	d100      	bne.n	80012e4 <HAL_RCC_OscConfig+0x2a4>
 80012e2:	e0b5      	b.n	8001450 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e4:	201f      	movs	r0, #31
 80012e6:	183b      	adds	r3, r7, r0
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80012ee:	69da      	ldr	r2, [r3, #28]
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	055b      	lsls	r3, r3, #21
 80012f4:	4013      	ands	r3, r2
 80012f6:	d110      	bne.n	800131a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80012fa:	69da      	ldr	r2, [r3, #28]
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	0549      	lsls	r1, r1, #21
 8001302:	430a      	orrs	r2, r1
 8001304:	61da      	str	r2, [r3, #28]
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001308:	69da      	ldr	r2, [r3, #28]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	055b      	lsls	r3, r3, #21
 800130e:	4013      	ands	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001314:	183b      	adds	r3, r7, r0
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_RCC_OscConfig+0x340>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4013      	ands	r3, r2
 8001324:	d11a      	bne.n	800135c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_RCC_OscConfig+0x340>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_RCC_OscConfig+0x340>)
 800132c:	2180      	movs	r1, #128	; 0x80
 800132e:	0049      	lsls	r1, r1, #1
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001334:	f7ff fc14 	bl	8000b60 <HAL_GetTick>
 8001338:	0003      	movs	r3, r0
 800133a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133e:	f7ff fc0f 	bl	8000b60 <HAL_GetTick>
 8001342:	0002      	movs	r2, r0
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b64      	cmp	r3, #100	; 0x64
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e186      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_RCC_OscConfig+0x340>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4013      	ands	r3, r2
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d10f      	bne.n	8001384 <HAL_RCC_OscConfig+0x344>
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 8001366:	6a1a      	ldr	r2, [r3, #32]
 8001368:	4b02      	ldr	r3, [pc, #8]	; (8001374 <HAL_RCC_OscConfig+0x334>)
 800136a:	2101      	movs	r1, #1
 800136c:	430a      	orrs	r2, r1
 800136e:	621a      	str	r2, [r3, #32]
 8001370:	e036      	b.n	80013e0 <HAL_RCC_OscConfig+0x3a0>
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	40021000 	.word	0x40021000
 8001378:	fffeffff 	.word	0xfffeffff
 800137c:	fffbffff 	.word	0xfffbffff
 8001380:	40007000 	.word	0x40007000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d10c      	bne.n	80013a6 <HAL_RCC_OscConfig+0x366>
 800138c:	4bb6      	ldr	r3, [pc, #728]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 800138e:	6a1a      	ldr	r2, [r3, #32]
 8001390:	4bb5      	ldr	r3, [pc, #724]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001392:	2101      	movs	r1, #1
 8001394:	438a      	bics	r2, r1
 8001396:	621a      	str	r2, [r3, #32]
 8001398:	4bb3      	ldr	r3, [pc, #716]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 800139a:	6a1a      	ldr	r2, [r3, #32]
 800139c:	4bb2      	ldr	r3, [pc, #712]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 800139e:	2104      	movs	r1, #4
 80013a0:	438a      	bics	r2, r1
 80013a2:	621a      	str	r2, [r3, #32]
 80013a4:	e01c      	b.n	80013e0 <HAL_RCC_OscConfig+0x3a0>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b05      	cmp	r3, #5
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x388>
 80013ae:	4bae      	ldr	r3, [pc, #696]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80013b0:	6a1a      	ldr	r2, [r3, #32]
 80013b2:	4bad      	ldr	r3, [pc, #692]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80013b4:	2104      	movs	r1, #4
 80013b6:	430a      	orrs	r2, r1
 80013b8:	621a      	str	r2, [r3, #32]
 80013ba:	4bab      	ldr	r3, [pc, #684]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80013bc:	6a1a      	ldr	r2, [r3, #32]
 80013be:	4baa      	ldr	r3, [pc, #680]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	430a      	orrs	r2, r1
 80013c4:	621a      	str	r2, [r3, #32]
 80013c6:	e00b      	b.n	80013e0 <HAL_RCC_OscConfig+0x3a0>
 80013c8:	4ba7      	ldr	r3, [pc, #668]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80013ca:	6a1a      	ldr	r2, [r3, #32]
 80013cc:	4ba6      	ldr	r3, [pc, #664]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	438a      	bics	r2, r1
 80013d2:	621a      	str	r2, [r3, #32]
 80013d4:	4ba4      	ldr	r3, [pc, #656]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80013d6:	6a1a      	ldr	r2, [r3, #32]
 80013d8:	4ba3      	ldr	r3, [pc, #652]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80013da:	2104      	movs	r1, #4
 80013dc:	438a      	bics	r2, r1
 80013de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d014      	beq.n	8001412 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e8:	f7ff fbba 	bl	8000b60 <HAL_GetTick>
 80013ec:	0003      	movs	r3, r0
 80013ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f0:	e009      	b.n	8001406 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f2:	f7ff fbb5 	bl	8000b60 <HAL_GetTick>
 80013f6:	0002      	movs	r2, r0
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	4a9b      	ldr	r2, [pc, #620]	; (800166c <HAL_RCC_OscConfig+0x62c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e12b      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001406:	4b98      	ldr	r3, [pc, #608]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	2202      	movs	r2, #2
 800140c:	4013      	ands	r3, r2
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x3b2>
 8001410:	e013      	b.n	800143a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff fba5 	bl	8000b60 <HAL_GetTick>
 8001416:	0003      	movs	r3, r0
 8001418:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141a:	e009      	b.n	8001430 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141c:	f7ff fba0 	bl	8000b60 <HAL_GetTick>
 8001420:	0002      	movs	r2, r0
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	4a91      	ldr	r2, [pc, #580]	; (800166c <HAL_RCC_OscConfig+0x62c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e116      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001430:	4b8d      	ldr	r3, [pc, #564]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	2202      	movs	r2, #2
 8001436:	4013      	ands	r3, r2
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800143a:	231f      	movs	r3, #31
 800143c:	18fb      	adds	r3, r7, r3
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d105      	bne.n	8001450 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001444:	4b88      	ldr	r3, [pc, #544]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001446:	69da      	ldr	r2, [r3, #28]
 8001448:	4b87      	ldr	r3, [pc, #540]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 800144a:	4989      	ldr	r1, [pc, #548]	; (8001670 <HAL_RCC_OscConfig+0x630>)
 800144c:	400a      	ands	r2, r1
 800144e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2210      	movs	r2, #16
 8001456:	4013      	ands	r3, r2
 8001458:	d063      	beq.n	8001522 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d12a      	bne.n	80014b8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001462:	4b81      	ldr	r3, [pc, #516]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001466:	4b80      	ldr	r3, [pc, #512]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001468:	2104      	movs	r1, #4
 800146a:	430a      	orrs	r2, r1
 800146c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800146e:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001472:	4b7d      	ldr	r3, [pc, #500]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001474:	2101      	movs	r1, #1
 8001476:	430a      	orrs	r2, r1
 8001478:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff fb71 	bl	8000b60 <HAL_GetTick>
 800147e:	0003      	movs	r3, r0
 8001480:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001484:	f7ff fb6c 	bl	8000b60 <HAL_GetTick>
 8001488:	0002      	movs	r2, r0
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e0e3      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001496:	4b74      	ldr	r3, [pc, #464]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149a:	2202      	movs	r2, #2
 800149c:	4013      	ands	r3, r2
 800149e:	d0f1      	beq.n	8001484 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014a0:	4b71      	ldr	r3, [pc, #452]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80014a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a4:	22f8      	movs	r2, #248	; 0xf8
 80014a6:	4393      	bics	r3, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	00da      	lsls	r2, r3, #3
 80014b0:	4b6d      	ldr	r3, [pc, #436]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80014b2:	430a      	orrs	r2, r1
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34
 80014b6:	e034      	b.n	8001522 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	3305      	adds	r3, #5
 80014be:	d111      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014c0:	4b69      	ldr	r3, [pc, #420]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80014c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c4:	4b68      	ldr	r3, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80014c6:	2104      	movs	r1, #4
 80014c8:	438a      	bics	r2, r1
 80014ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014cc:	4b66      	ldr	r3, [pc, #408]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80014ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d0:	22f8      	movs	r2, #248	; 0xf8
 80014d2:	4393      	bics	r3, r2
 80014d4:	0019      	movs	r1, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	00da      	lsls	r2, r3, #3
 80014dc:	4b62      	ldr	r3, [pc, #392]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80014de:	430a      	orrs	r2, r1
 80014e0:	635a      	str	r2, [r3, #52]	; 0x34
 80014e2:	e01e      	b.n	8001522 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014e4:	4b60      	ldr	r3, [pc, #384]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80014e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e8:	4b5f      	ldr	r3, [pc, #380]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80014ea:	2104      	movs	r1, #4
 80014ec:	430a      	orrs	r2, r1
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014f0:	4b5d      	ldr	r3, [pc, #372]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80014f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f4:	4b5c      	ldr	r3, [pc, #368]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	438a      	bics	r2, r1
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fc:	f7ff fb30 	bl	8000b60 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001506:	f7ff fb2b 	bl	8000b60 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e0a2      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001518:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 800151a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151c:	2202      	movs	r2, #2
 800151e:	4013      	ands	r3, r2
 8001520:	d1f1      	bne.n	8001506 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d100      	bne.n	800152c <HAL_RCC_OscConfig+0x4ec>
 800152a:	e097      	b.n	800165c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800152c:	4b4e      	ldr	r3, [pc, #312]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	220c      	movs	r2, #12
 8001532:	4013      	ands	r3, r2
 8001534:	2b08      	cmp	r3, #8
 8001536:	d100      	bne.n	800153a <HAL_RCC_OscConfig+0x4fa>
 8001538:	e06b      	b.n	8001612 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d14c      	bne.n	80015dc <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001542:	4b49      	ldr	r3, [pc, #292]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b48      	ldr	r3, [pc, #288]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001548:	494a      	ldr	r1, [pc, #296]	; (8001674 <HAL_RCC_OscConfig+0x634>)
 800154a:	400a      	ands	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fb07 	bl	8000b60 <HAL_GetTick>
 8001552:	0003      	movs	r3, r0
 8001554:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001558:	f7ff fb02 	bl	8000b60 <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e079      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800156a:	4b3f      	ldr	r3, [pc, #252]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	049b      	lsls	r3, r3, #18
 8001572:	4013      	ands	r3, r2
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001576:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	220f      	movs	r2, #15
 800157c:	4393      	bics	r3, r2
 800157e:	0019      	movs	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001584:	4b38      	ldr	r3, [pc, #224]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001586:	430a      	orrs	r2, r1
 8001588:	62da      	str	r2, [r3, #44]	; 0x2c
 800158a:	4b37      	ldr	r3, [pc, #220]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4a3a      	ldr	r2, [pc, #232]	; (8001678 <HAL_RCC_OscConfig+0x638>)
 8001590:	4013      	ands	r3, r2
 8001592:	0019      	movs	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	431a      	orrs	r2, r3
 800159e:	4b32      	ldr	r3, [pc, #200]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80015a0:	430a      	orrs	r2, r1
 80015a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a4:	4b30      	ldr	r3, [pc, #192]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	0449      	lsls	r1, r1, #17
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fad5 	bl	8000b60 <HAL_GetTick>
 80015b6:	0003      	movs	r3, r0
 80015b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015bc:	f7ff fad0 	bl	8000b60 <HAL_GetTick>
 80015c0:	0002      	movs	r2, r0
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e047      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	049b      	lsls	r3, r3, #18
 80015d6:	4013      	ands	r3, r2
 80015d8:	d0f0      	beq.n	80015bc <HAL_RCC_OscConfig+0x57c>
 80015da:	e03f      	b.n	800165c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b21      	ldr	r3, [pc, #132]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 80015e2:	4924      	ldr	r1, [pc, #144]	; (8001674 <HAL_RCC_OscConfig+0x634>)
 80015e4:	400a      	ands	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff faba 	bl	8000b60 <HAL_GetTick>
 80015ec:	0003      	movs	r3, r0
 80015ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff fab5 	bl	8000b60 <HAL_GetTick>
 80015f6:	0002      	movs	r2, r0
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e02c      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	049b      	lsls	r3, r3, #18
 800160c:	4013      	ands	r3, r2
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0x5b2>
 8001610:	e024      	b.n	800165c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e01f      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_RCC_OscConfig+0x628>)
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	23c0      	movs	r3, #192	; 0xc0
 800162e:	025b      	lsls	r3, r3, #9
 8001630:	401a      	ands	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	429a      	cmp	r2, r3
 8001638:	d10e      	bne.n	8001658 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	220f      	movs	r2, #15
 800163e:	401a      	ands	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001644:	429a      	cmp	r2, r3
 8001646:	d107      	bne.n	8001658 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	23f0      	movs	r3, #240	; 0xf0
 800164c:	039b      	lsls	r3, r3, #14
 800164e:	401a      	ands	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	0018      	movs	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	b008      	add	sp, #32
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	40021000 	.word	0x40021000
 800166c:	00001388 	.word	0x00001388
 8001670:	efffffff 	.word	0xefffffff
 8001674:	feffffff 	.word	0xfeffffff
 8001678:	ffc27fff 	.word	0xffc27fff

0800167c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0b3      	b.n	80017f8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001690:	4b5b      	ldr	r3, [pc, #364]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2201      	movs	r2, #1
 8001696:	4013      	ands	r3, r2
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d911      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b58      	ldr	r3, [pc, #352]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2201      	movs	r2, #1
 80016a4:	4393      	bics	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	4b55      	ldr	r3, [pc, #340]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b0:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2201      	movs	r2, #1
 80016b6:	4013      	ands	r3, r2
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e09a      	b.n	80017f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2202      	movs	r2, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	d015      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2204      	movs	r2, #4
 80016d2:	4013      	ands	r3, r2
 80016d4:	d006      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016d6:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 80016dc:	21e0      	movs	r1, #224	; 0xe0
 80016de:	00c9      	lsls	r1, r1, #3
 80016e0:	430a      	orrs	r2, r1
 80016e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	22f0      	movs	r2, #240	; 0xf0
 80016ea:	4393      	bics	r3, r2
 80016ec:	0019      	movs	r1, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	4b44      	ldr	r3, [pc, #272]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 80016f4:	430a      	orrs	r2, r1
 80016f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	4013      	ands	r3, r2
 8001700:	d040      	beq.n	8001784 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	029b      	lsls	r3, r3, #10
 8001712:	4013      	ands	r3, r2
 8001714:	d114      	bne.n	8001740 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e06e      	b.n	80017f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b38      	ldr	r3, [pc, #224]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	049b      	lsls	r3, r3, #18
 800172a:	4013      	ands	r3, r2
 800172c:	d108      	bne.n	8001740 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e062      	b.n	80017f8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b34      	ldr	r3, [pc, #208]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2202      	movs	r2, #2
 8001738:	4013      	ands	r3, r2
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e05b      	b.n	80017f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2203      	movs	r2, #3
 8001746:	4393      	bics	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 8001750:	430a      	orrs	r2, r1
 8001752:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff fa04 	bl	8000b60 <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175c:	e009      	b.n	8001772 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175e:	f7ff f9ff 	bl	8000b60 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	4a27      	ldr	r2, [pc, #156]	; (8001808 <HAL_RCC_ClockConfig+0x18c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e042      	b.n	80017f8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	220c      	movs	r2, #12
 8001778:	401a      	ands	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	429a      	cmp	r2, r3
 8001782:	d1ec      	bne.n	800175e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2201      	movs	r2, #1
 800178a:	4013      	ands	r3, r2
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d211      	bcs.n	80017b6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2201      	movs	r2, #1
 8001798:	4393      	bics	r3, r2
 800179a:	0019      	movs	r1, r3
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <HAL_RCC_ClockConfig+0x184>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2201      	movs	r2, #1
 80017aa:	4013      	ands	r3, r2
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d001      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e020      	b.n	80017f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2204      	movs	r2, #4
 80017bc:	4013      	ands	r3, r2
 80017be:	d009      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4a11      	ldr	r2, [pc, #68]	; (800180c <HAL_RCC_ClockConfig+0x190>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	0019      	movs	r1, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 80017d0:	430a      	orrs	r2, r1
 80017d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017d4:	f000 f820 	bl	8001818 <HAL_RCC_GetSysClockFreq>
 80017d8:	0001      	movs	r1, r0
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_RCC_ClockConfig+0x188>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	220f      	movs	r2, #15
 80017e2:	4013      	ands	r3, r2
 80017e4:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_RCC_ClockConfig+0x194>)
 80017e6:	5cd3      	ldrb	r3, [r2, r3]
 80017e8:	000a      	movs	r2, r1
 80017ea:	40da      	lsrs	r2, r3
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_RCC_ClockConfig+0x198>)
 80017ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f7ff f96f 	bl	8000ad4 <HAL_InitTick>
  
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b004      	add	sp, #16
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40022000 	.word	0x40022000
 8001804:	40021000 	.word	0x40021000
 8001808:	00001388 	.word	0x00001388
 800180c:	fffff8ff 	.word	0xfffff8ff
 8001810:	080026a8 	.word	0x080026a8
 8001814:	20000000 	.word	0x20000000

08001818 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b08f      	sub	sp, #60	; 0x3c
 800181c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800181e:	2314      	movs	r3, #20
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	4a2c      	ldr	r2, [pc, #176]	; (80018d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001824:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001826:	c313      	stmia	r3!, {r0, r1, r4}
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4a2a      	ldr	r2, [pc, #168]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001830:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001832:	c313      	stmia	r3!, {r0, r1, r4}
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800183c:	2300      	movs	r3, #0
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800184c:	4b23      	ldr	r3, [pc, #140]	; (80018dc <HAL_RCC_GetSysClockFreq+0xc4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001854:	220c      	movs	r2, #12
 8001856:	4013      	ands	r3, r2
 8001858:	2b04      	cmp	r3, #4
 800185a:	d002      	beq.n	8001862 <HAL_RCC_GetSysClockFreq+0x4a>
 800185c:	2b08      	cmp	r3, #8
 800185e:	d003      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0x50>
 8001860:	e02f      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001866:	e02f      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186a:	0c9b      	lsrs	r3, r3, #18
 800186c:	220f      	movs	r2, #15
 800186e:	4013      	ands	r3, r2
 8001870:	2214      	movs	r2, #20
 8001872:	18ba      	adds	r2, r7, r2
 8001874:	5cd3      	ldrb	r3, [r2, r3]
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_RCC_GetSysClockFreq+0xc4>)
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	220f      	movs	r2, #15
 800187e:	4013      	ands	r3, r2
 8001880:	1d3a      	adds	r2, r7, #4
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001888:	23c0      	movs	r3, #192	; 0xc0
 800188a:	025b      	lsls	r3, r3, #9
 800188c:	401a      	ands	r2, r3
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	025b      	lsls	r3, r3, #9
 8001892:	429a      	cmp	r2, r3
 8001894:	d109      	bne.n	80018aa <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001896:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001898:	4811      	ldr	r0, [pc, #68]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800189a:	f7fe fc35 	bl	8000108 <__udivsi3>
 800189e:	0003      	movs	r3, r0
 80018a0:	001a      	movs	r2, r3
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	4353      	muls	r3, r2
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
 80018a8:	e008      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80018aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ac:	480c      	ldr	r0, [pc, #48]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80018ae:	f7fe fc2b 	bl	8000108 <__udivsi3>
 80018b2:	0003      	movs	r3, r0
 80018b4:	001a      	movs	r2, r3
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	4353      	muls	r3, r2
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80018bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018c0:	e002      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80018c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018c6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80018c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80018ca:	0018      	movs	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b00f      	add	sp, #60	; 0x3c
 80018d0:	bd90      	pop	{r4, r7, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	08002688 	.word	0x08002688
 80018d8:	08002698 	.word	0x08002698
 80018dc:	40021000 	.word	0x40021000
 80018e0:	007a1200 	.word	0x007a1200

080018e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e042      	b.n	800197c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	223d      	movs	r2, #61	; 0x3d
 80018fa:	5c9b      	ldrb	r3, [r3, r2]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d107      	bne.n	8001912 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	223c      	movs	r2, #60	; 0x3c
 8001906:	2100      	movs	r1, #0
 8001908:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	0018      	movs	r0, r3
 800190e:	f7fe ffc5 	bl	800089c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	223d      	movs	r2, #61	; 0x3d
 8001916:	2102      	movs	r1, #2
 8001918:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3304      	adds	r3, #4
 8001922:	0019      	movs	r1, r3
 8001924:	0010      	movs	r0, r2
 8001926:	f000 fabd 	bl	8001ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2246      	movs	r2, #70	; 0x46
 800192e:	2101      	movs	r1, #1
 8001930:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	223e      	movs	r2, #62	; 0x3e
 8001936:	2101      	movs	r1, #1
 8001938:	5499      	strb	r1, [r3, r2]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	223f      	movs	r2, #63	; 0x3f
 800193e:	2101      	movs	r1, #1
 8001940:	5499      	strb	r1, [r3, r2]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2240      	movs	r2, #64	; 0x40
 8001946:	2101      	movs	r1, #1
 8001948:	5499      	strb	r1, [r3, r2]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2241      	movs	r2, #65	; 0x41
 800194e:	2101      	movs	r1, #1
 8001950:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2242      	movs	r2, #66	; 0x42
 8001956:	2101      	movs	r1, #1
 8001958:	5499      	strb	r1, [r3, r2]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2243      	movs	r2, #67	; 0x43
 800195e:	2101      	movs	r1, #1
 8001960:	5499      	strb	r1, [r3, r2]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2244      	movs	r2, #68	; 0x44
 8001966:	2101      	movs	r1, #1
 8001968:	5499      	strb	r1, [r3, r2]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2245      	movs	r2, #69	; 0x45
 800196e:	2101      	movs	r1, #1
 8001970:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	223d      	movs	r2, #61	; 0x3d
 8001976:	2101      	movs	r1, #1
 8001978:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	b002      	add	sp, #8
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e042      	b.n	8001a1c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	223d      	movs	r2, #61	; 0x3d
 800199a:	5c9b      	ldrb	r3, [r3, r2]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d107      	bne.n	80019b2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	223c      	movs	r2, #60	; 0x3c
 80019a6:	2100      	movs	r1, #0
 80019a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7fe ff95 	bl	80008dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	223d      	movs	r2, #61	; 0x3d
 80019b6:	2102      	movs	r1, #2
 80019b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3304      	adds	r3, #4
 80019c2:	0019      	movs	r1, r3
 80019c4:	0010      	movs	r0, r2
 80019c6:	f000 fa6d 	bl	8001ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2246      	movs	r2, #70	; 0x46
 80019ce:	2101      	movs	r1, #1
 80019d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	223e      	movs	r2, #62	; 0x3e
 80019d6:	2101      	movs	r1, #1
 80019d8:	5499      	strb	r1, [r3, r2]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	223f      	movs	r2, #63	; 0x3f
 80019de:	2101      	movs	r1, #1
 80019e0:	5499      	strb	r1, [r3, r2]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2240      	movs	r2, #64	; 0x40
 80019e6:	2101      	movs	r1, #1
 80019e8:	5499      	strb	r1, [r3, r2]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2241      	movs	r2, #65	; 0x41
 80019ee:	2101      	movs	r1, #1
 80019f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2242      	movs	r2, #66	; 0x42
 80019f6:	2101      	movs	r1, #1
 80019f8:	5499      	strb	r1, [r3, r2]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2243      	movs	r2, #67	; 0x43
 80019fe:	2101      	movs	r1, #1
 8001a00:	5499      	strb	r1, [r3, r2]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2244      	movs	r2, #68	; 0x44
 8001a06:	2101      	movs	r1, #1
 8001a08:	5499      	strb	r1, [r3, r2]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2245      	movs	r2, #69	; 0x45
 8001a0e:	2101      	movs	r1, #1
 8001a10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	223d      	movs	r2, #61	; 0x3d
 8001a16:	2101      	movs	r1, #1
 8001a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b002      	add	sp, #8
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d108      	bne.n	8001a46 <HAL_TIM_PWM_Start+0x22>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	223e      	movs	r2, #62	; 0x3e
 8001a38:	5c9b      	ldrb	r3, [r3, r2]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	1e5a      	subs	r2, r3, #1
 8001a40:	4193      	sbcs	r3, r2
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	e01f      	b.n	8001a86 <HAL_TIM_PWM_Start+0x62>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d108      	bne.n	8001a5e <HAL_TIM_PWM_Start+0x3a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	223f      	movs	r2, #63	; 0x3f
 8001a50:	5c9b      	ldrb	r3, [r3, r2]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	3b01      	subs	r3, #1
 8001a56:	1e5a      	subs	r2, r3, #1
 8001a58:	4193      	sbcs	r3, r2
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	e013      	b.n	8001a86 <HAL_TIM_PWM_Start+0x62>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d108      	bne.n	8001a76 <HAL_TIM_PWM_Start+0x52>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2240      	movs	r2, #64	; 0x40
 8001a68:	5c9b      	ldrb	r3, [r3, r2]
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	1e5a      	subs	r2, r3, #1
 8001a70:	4193      	sbcs	r3, r2
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	e007      	b.n	8001a86 <HAL_TIM_PWM_Start+0x62>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2241      	movs	r2, #65	; 0x41
 8001a7a:	5c9b      	ldrb	r3, [r3, r2]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	1e5a      	subs	r2, r3, #1
 8001a82:	4193      	sbcs	r3, r2
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e064      	b.n	8001b58 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d104      	bne.n	8001a9e <HAL_TIM_PWM_Start+0x7a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	223e      	movs	r2, #62	; 0x3e
 8001a98:	2102      	movs	r1, #2
 8001a9a:	5499      	strb	r1, [r3, r2]
 8001a9c:	e013      	b.n	8001ac6 <HAL_TIM_PWM_Start+0xa2>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d104      	bne.n	8001aae <HAL_TIM_PWM_Start+0x8a>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	223f      	movs	r2, #63	; 0x3f
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	5499      	strb	r1, [r3, r2]
 8001aac:	e00b      	b.n	8001ac6 <HAL_TIM_PWM_Start+0xa2>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d104      	bne.n	8001abe <HAL_TIM_PWM_Start+0x9a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2240      	movs	r2, #64	; 0x40
 8001ab8:	2102      	movs	r1, #2
 8001aba:	5499      	strb	r1, [r3, r2]
 8001abc:	e003      	b.n	8001ac6 <HAL_TIM_PWM_Start+0xa2>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2241      	movs	r2, #65	; 0x41
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6839      	ldr	r1, [r7, #0]
 8001acc:	2201      	movs	r2, #1
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f000 fcce 	bl	8002470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a21      	ldr	r2, [pc, #132]	; (8001b60 <HAL_TIM_PWM_Start+0x13c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d009      	beq.n	8001af2 <HAL_TIM_PWM_Start+0xce>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a20      	ldr	r2, [pc, #128]	; (8001b64 <HAL_TIM_PWM_Start+0x140>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d004      	beq.n	8001af2 <HAL_TIM_PWM_Start+0xce>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1e      	ldr	r2, [pc, #120]	; (8001b68 <HAL_TIM_PWM_Start+0x144>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_TIM_PWM_Start+0xd2>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_TIM_PWM_Start+0xd4>
 8001af6:	2300      	movs	r3, #0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	0209      	lsls	r1, r1, #8
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <HAL_TIM_PWM_Start+0x13c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d004      	beq.n	8001b22 <HAL_TIM_PWM_Start+0xfe>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <HAL_TIM_PWM_Start+0x148>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d111      	bne.n	8001b46 <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2207      	movs	r2, #7
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b06      	cmp	r3, #6
 8001b32:	d010      	beq.n	8001b56 <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2101      	movs	r1, #1
 8001b40:	430a      	orrs	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b44:	e007      	b.n	8001b56 <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2101      	movs	r1, #1
 8001b52:	430a      	orrs	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	0018      	movs	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b004      	add	sp, #16
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40012c00 	.word	0x40012c00
 8001b64:	40014400 	.word	0x40014400
 8001b68:	40014800 	.word	0x40014800
 8001b6c:	40000400 	.word	0x40000400

08001b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7c:	2317      	movs	r3, #23
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	223c      	movs	r2, #60	; 0x3c
 8001b88:	5c9b      	ldrb	r3, [r3, r2]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e0ad      	b.n	8001cee <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	223c      	movs	r2, #60	; 0x3c
 8001b96:	2101      	movs	r1, #1
 8001b98:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	d100      	bne.n	8001ba2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001ba0:	e076      	b.n	8001c90 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b0c      	cmp	r3, #12
 8001ba6:	d900      	bls.n	8001baa <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001ba8:	e095      	b.n	8001cd6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d04e      	beq.n	8001c4e <HAL_TIM_PWM_ConfigChannel+0xde>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d900      	bls.n	8001bb8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001bb6:	e08e      	b.n	8001cd6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d021      	beq.n	8001c08 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001bc4:	e087      	b.n	8001cd6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	0011      	movs	r1, r2
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f000 f9d4 	bl	8001f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2108      	movs	r1, #8
 8001be0:	430a      	orrs	r2, r1
 8001be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2104      	movs	r1, #4
 8001bf0:	438a      	bics	r2, r1
 8001bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6999      	ldr	r1, [r3, #24]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	619a      	str	r2, [r3, #24]
      break;
 8001c06:	e06b      	b.n	8001ce0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	0011      	movs	r1, r2
 8001c10:	0018      	movs	r0, r3
 8001c12:	f000 fa31 	bl	8002078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699a      	ldr	r2, [r3, #24]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	0109      	lsls	r1, r1, #4
 8001c24:	430a      	orrs	r2, r1
 8001c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699a      	ldr	r2, [r3, #24]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4931      	ldr	r1, [pc, #196]	; (8001cf8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001c34:	400a      	ands	r2, r1
 8001c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6999      	ldr	r1, [r3, #24]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	021a      	lsls	r2, r3, #8
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	619a      	str	r2, [r3, #24]
      break;
 8001c4c:	e048      	b.n	8001ce0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	0011      	movs	r1, r2
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 fa8c 	bl	8002174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	69da      	ldr	r2, [r3, #28]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2108      	movs	r1, #8
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2104      	movs	r1, #4
 8001c78:	438a      	bics	r2, r1
 8001c7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	69d9      	ldr	r1, [r3, #28]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	61da      	str	r2, [r3, #28]
      break;
 8001c8e:	e027      	b.n	8001ce0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	0011      	movs	r1, r2
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f000 faeb 	bl	8002274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	69da      	ldr	r2, [r3, #28]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0109      	lsls	r1, r1, #4
 8001cac:	430a      	orrs	r2, r1
 8001cae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	69da      	ldr	r2, [r3, #28]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	490f      	ldr	r1, [pc, #60]	; (8001cf8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69d9      	ldr	r1, [r3, #28]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	021a      	lsls	r2, r3, #8
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	61da      	str	r2, [r3, #28]
      break;
 8001cd4:	e004      	b.n	8001ce0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001cd6:	2317      	movs	r3, #23
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
      break;
 8001cde:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	223c      	movs	r2, #60	; 0x3c
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	5499      	strb	r1, [r3, r2]

  return status;
 8001ce8:	2317      	movs	r3, #23
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	781b      	ldrb	r3, [r3, #0]
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b006      	add	sp, #24
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	fffffbff 	.word	0xfffffbff

08001cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d06:	230f      	movs	r3, #15
 8001d08:	18fb      	adds	r3, r7, r3
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	223c      	movs	r2, #60	; 0x3c
 8001d12:	5c9b      	ldrb	r3, [r3, r2]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_TIM_ConfigClockSource+0x20>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e0bc      	b.n	8001e96 <HAL_TIM_ConfigClockSource+0x19a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	223c      	movs	r2, #60	; 0x3c
 8001d20:	2101      	movs	r1, #1
 8001d22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	223d      	movs	r2, #61	; 0x3d
 8001d28:	2102      	movs	r1, #2
 8001d2a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2277      	movs	r2, #119	; 0x77
 8001d38:	4393      	bics	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4a58      	ldr	r2, [pc, #352]	; (8001ea0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2280      	movs	r2, #128	; 0x80
 8001d52:	0192      	lsls	r2, r2, #6
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d040      	beq.n	8001dda <HAL_TIM_ConfigClockSource+0xde>
 8001d58:	2280      	movs	r2, #128	; 0x80
 8001d5a:	0192      	lsls	r2, r2, #6
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d900      	bls.n	8001d62 <HAL_TIM_ConfigClockSource+0x66>
 8001d60:	e088      	b.n	8001e74 <HAL_TIM_ConfigClockSource+0x178>
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	0152      	lsls	r2, r2, #5
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d100      	bne.n	8001d6c <HAL_TIM_ConfigClockSource+0x70>
 8001d6a:	e088      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0x182>
 8001d6c:	2280      	movs	r2, #128	; 0x80
 8001d6e:	0152      	lsls	r2, r2, #5
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d900      	bls.n	8001d76 <HAL_TIM_ConfigClockSource+0x7a>
 8001d74:	e07e      	b.n	8001e74 <HAL_TIM_ConfigClockSource+0x178>
 8001d76:	2b70      	cmp	r3, #112	; 0x70
 8001d78:	d018      	beq.n	8001dac <HAL_TIM_ConfigClockSource+0xb0>
 8001d7a:	d900      	bls.n	8001d7e <HAL_TIM_ConfigClockSource+0x82>
 8001d7c:	e07a      	b.n	8001e74 <HAL_TIM_ConfigClockSource+0x178>
 8001d7e:	2b60      	cmp	r3, #96	; 0x60
 8001d80:	d04f      	beq.n	8001e22 <HAL_TIM_ConfigClockSource+0x126>
 8001d82:	d900      	bls.n	8001d86 <HAL_TIM_ConfigClockSource+0x8a>
 8001d84:	e076      	b.n	8001e74 <HAL_TIM_ConfigClockSource+0x178>
 8001d86:	2b50      	cmp	r3, #80	; 0x50
 8001d88:	d03b      	beq.n	8001e02 <HAL_TIM_ConfigClockSource+0x106>
 8001d8a:	d900      	bls.n	8001d8e <HAL_TIM_ConfigClockSource+0x92>
 8001d8c:	e072      	b.n	8001e74 <HAL_TIM_ConfigClockSource+0x178>
 8001d8e:	2b40      	cmp	r3, #64	; 0x40
 8001d90:	d057      	beq.n	8001e42 <HAL_TIM_ConfigClockSource+0x146>
 8001d92:	d900      	bls.n	8001d96 <HAL_TIM_ConfigClockSource+0x9a>
 8001d94:	e06e      	b.n	8001e74 <HAL_TIM_ConfigClockSource+0x178>
 8001d96:	2b30      	cmp	r3, #48	; 0x30
 8001d98:	d063      	beq.n	8001e62 <HAL_TIM_ConfigClockSource+0x166>
 8001d9a:	d86b      	bhi.n	8001e74 <HAL_TIM_ConfigClockSource+0x178>
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d060      	beq.n	8001e62 <HAL_TIM_ConfigClockSource+0x166>
 8001da0:	d868      	bhi.n	8001e74 <HAL_TIM_ConfigClockSource+0x178>
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d05d      	beq.n	8001e62 <HAL_TIM_ConfigClockSource+0x166>
 8001da6:	2b10      	cmp	r3, #16
 8001da8:	d05b      	beq.n	8001e62 <HAL_TIM_ConfigClockSource+0x166>
 8001daa:	e063      	b.n	8001e74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6899      	ldr	r1, [r3, #8]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f000 fb38 	bl	8002430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2277      	movs	r2, #119	; 0x77
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	609a      	str	r2, [r3, #8]
      break;
 8001dd8:	e052      	b.n	8001e80 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	6899      	ldr	r1, [r3, #8]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f000 fb21 	bl	8002430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2180      	movs	r1, #128	; 0x80
 8001dfa:	01c9      	lsls	r1, r1, #7
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	609a      	str	r2, [r3, #8]
      break;
 8001e00:	e03e      	b.n	8001e80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6859      	ldr	r1, [r3, #4]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	001a      	movs	r2, r3
 8001e10:	f000 fa94 	bl	800233c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2150      	movs	r1, #80	; 0x50
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f000 faee 	bl	80023fc <TIM_ITRx_SetConfig>
      break;
 8001e20:	e02e      	b.n	8001e80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	6859      	ldr	r1, [r3, #4]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	001a      	movs	r2, r3
 8001e30:	f000 fab2 	bl	8002398 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2160      	movs	r1, #96	; 0x60
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 fade 	bl	80023fc <TIM_ITRx_SetConfig>
      break;
 8001e40:	e01e      	b.n	8001e80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	001a      	movs	r2, r3
 8001e50:	f000 fa74 	bl	800233c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2140      	movs	r1, #64	; 0x40
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f000 face 	bl	80023fc <TIM_ITRx_SetConfig>
      break;
 8001e60:	e00e      	b.n	8001e80 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	0010      	movs	r0, r2
 8001e6e:	f000 fac5 	bl	80023fc <TIM_ITRx_SetConfig>
      break;
 8001e72:	e005      	b.n	8001e80 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001e74:	230f      	movs	r3, #15
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
      break;
 8001e7c:	e000      	b.n	8001e80 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001e7e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	223d      	movs	r2, #61	; 0x3d
 8001e84:	2101      	movs	r1, #1
 8001e86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	223c      	movs	r2, #60	; 0x3c
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	5499      	strb	r1, [r3, r2]

  return status;
 8001e90:	230f      	movs	r3, #15
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	781b      	ldrb	r3, [r3, #0]
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b004      	add	sp, #16
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	ffff00ff 	.word	0xffff00ff

08001ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a2b      	ldr	r2, [pc, #172]	; (8001f64 <TIM_Base_SetConfig+0xc0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d003      	beq.n	8001ec4 <TIM_Base_SetConfig+0x20>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a2a      	ldr	r2, [pc, #168]	; (8001f68 <TIM_Base_SetConfig+0xc4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d108      	bne.n	8001ed6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2270      	movs	r2, #112	; 0x70
 8001ec8:	4393      	bics	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <TIM_Base_SetConfig+0xc0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00f      	beq.n	8001efe <TIM_Base_SetConfig+0x5a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <TIM_Base_SetConfig+0xc4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00b      	beq.n	8001efe <TIM_Base_SetConfig+0x5a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a20      	ldr	r2, [pc, #128]	; (8001f6c <TIM_Base_SetConfig+0xc8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d007      	beq.n	8001efe <TIM_Base_SetConfig+0x5a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1f      	ldr	r2, [pc, #124]	; (8001f70 <TIM_Base_SetConfig+0xcc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d003      	beq.n	8001efe <TIM_Base_SetConfig+0x5a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1e      	ldr	r2, [pc, #120]	; (8001f74 <TIM_Base_SetConfig+0xd0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d108      	bne.n	8001f10 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <TIM_Base_SetConfig+0xd4>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2280      	movs	r2, #128	; 0x80
 8001f14:	4393      	bics	r3, r2
 8001f16:	001a      	movs	r2, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <TIM_Base_SetConfig+0xc0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d007      	beq.n	8001f4e <TIM_Base_SetConfig+0xaa>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <TIM_Base_SetConfig+0xcc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d003      	beq.n	8001f4e <TIM_Base_SetConfig+0xaa>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <TIM_Base_SetConfig+0xd0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d103      	bne.n	8001f56 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	615a      	str	r2, [r3, #20]
}
 8001f5c:	46c0      	nop			; (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b004      	add	sp, #16
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40012c00 	.word	0x40012c00
 8001f68:	40000400 	.word	0x40000400
 8001f6c:	40002000 	.word	0x40002000
 8001f70:	40014400 	.word	0x40014400
 8001f74:	40014800 	.word	0x40014800
 8001f78:	fffffcff 	.word	0xfffffcff

08001f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4393      	bics	r3, r2
 8001f8e:	001a      	movs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2270      	movs	r2, #112	; 0x70
 8001faa:	4393      	bics	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	4393      	bics	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4393      	bics	r3, r2
 8001fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a23      	ldr	r2, [pc, #140]	; (8002064 <TIM_OC1_SetConfig+0xe8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d007      	beq.n	8001fea <TIM_OC1_SetConfig+0x6e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a22      	ldr	r2, [pc, #136]	; (8002068 <TIM_OC1_SetConfig+0xec>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d003      	beq.n	8001fea <TIM_OC1_SetConfig+0x6e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a21      	ldr	r2, [pc, #132]	; (800206c <TIM_OC1_SetConfig+0xf0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10c      	bne.n	8002004 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2208      	movs	r2, #8
 8001fee:	4393      	bics	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2204      	movs	r2, #4
 8002000:	4393      	bics	r3, r2
 8002002:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a17      	ldr	r2, [pc, #92]	; (8002064 <TIM_OC1_SetConfig+0xe8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d007      	beq.n	800201c <TIM_OC1_SetConfig+0xa0>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a16      	ldr	r2, [pc, #88]	; (8002068 <TIM_OC1_SetConfig+0xec>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <TIM_OC1_SetConfig+0xa0>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a15      	ldr	r2, [pc, #84]	; (800206c <TIM_OC1_SetConfig+0xf0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d111      	bne.n	8002040 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4a14      	ldr	r2, [pc, #80]	; (8002070 <TIM_OC1_SetConfig+0xf4>)
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4a13      	ldr	r2, [pc, #76]	; (8002074 <TIM_OC1_SetConfig+0xf8>)
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	621a      	str	r2, [r3, #32]
}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b006      	add	sp, #24
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	40012c00 	.word	0x40012c00
 8002068:	40014400 	.word	0x40014400
 800206c:	40014800 	.word	0x40014800
 8002070:	fffffeff 	.word	0xfffffeff
 8002074:	fffffdff 	.word	0xfffffdff

08002078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	2210      	movs	r2, #16
 8002088:	4393      	bics	r3, r2
 800208a:	001a      	movs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4a2c      	ldr	r2, [pc, #176]	; (8002158 <TIM_OC2_SetConfig+0xe0>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4a2b      	ldr	r2, [pc, #172]	; (800215c <TIM_OC2_SetConfig+0xe4>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2220      	movs	r2, #32
 80020c2:	4393      	bics	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a22      	ldr	r2, [pc, #136]	; (8002160 <TIM_OC2_SetConfig+0xe8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d10d      	bne.n	80020f6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2280      	movs	r2, #128	; 0x80
 80020de:	4393      	bics	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2240      	movs	r2, #64	; 0x40
 80020f2:	4393      	bics	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a19      	ldr	r2, [pc, #100]	; (8002160 <TIM_OC2_SetConfig+0xe8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <TIM_OC2_SetConfig+0x96>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a18      	ldr	r2, [pc, #96]	; (8002164 <TIM_OC2_SetConfig+0xec>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d003      	beq.n	800210e <TIM_OC2_SetConfig+0x96>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a17      	ldr	r2, [pc, #92]	; (8002168 <TIM_OC2_SetConfig+0xf0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d113      	bne.n	8002136 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4a16      	ldr	r2, [pc, #88]	; (800216c <TIM_OC2_SetConfig+0xf4>)
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4a15      	ldr	r2, [pc, #84]	; (8002170 <TIM_OC2_SetConfig+0xf8>)
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	621a      	str	r2, [r3, #32]
}
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b006      	add	sp, #24
 8002156:	bd80      	pop	{r7, pc}
 8002158:	ffff8fff 	.word	0xffff8fff
 800215c:	fffffcff 	.word	0xfffffcff
 8002160:	40012c00 	.word	0x40012c00
 8002164:	40014400 	.word	0x40014400
 8002168:	40014800 	.word	0x40014800
 800216c:	fffffbff 	.word	0xfffffbff
 8002170:	fffff7ff 	.word	0xfffff7ff

08002174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a33      	ldr	r2, [pc, #204]	; (8002250 <TIM_OC3_SetConfig+0xdc>)
 8002184:	401a      	ands	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2270      	movs	r2, #112	; 0x70
 80021a0:	4393      	bics	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2203      	movs	r2, #3
 80021a8:	4393      	bics	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	4a26      	ldr	r2, [pc, #152]	; (8002254 <TIM_OC3_SetConfig+0xe0>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a22      	ldr	r2, [pc, #136]	; (8002258 <TIM_OC3_SetConfig+0xe4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d10d      	bne.n	80021ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	4a21      	ldr	r2, [pc, #132]	; (800225c <TIM_OC3_SetConfig+0xe8>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	4a1d      	ldr	r2, [pc, #116]	; (8002260 <TIM_OC3_SetConfig+0xec>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a19      	ldr	r2, [pc, #100]	; (8002258 <TIM_OC3_SetConfig+0xe4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <TIM_OC3_SetConfig+0x92>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a1a      	ldr	r2, [pc, #104]	; (8002264 <TIM_OC3_SetConfig+0xf0>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d003      	beq.n	8002206 <TIM_OC3_SetConfig+0x92>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a19      	ldr	r2, [pc, #100]	; (8002268 <TIM_OC3_SetConfig+0xf4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d113      	bne.n	800222e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4a18      	ldr	r2, [pc, #96]	; (800226c <TIM_OC3_SetConfig+0xf8>)
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4a17      	ldr	r2, [pc, #92]	; (8002270 <TIM_OC3_SetConfig+0xfc>)
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	621a      	str	r2, [r3, #32]
}
 8002248:	46c0      	nop			; (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	b006      	add	sp, #24
 800224e:	bd80      	pop	{r7, pc}
 8002250:	fffffeff 	.word	0xfffffeff
 8002254:	fffffdff 	.word	0xfffffdff
 8002258:	40012c00 	.word	0x40012c00
 800225c:	fffff7ff 	.word	0xfffff7ff
 8002260:	fffffbff 	.word	0xfffffbff
 8002264:	40014400 	.word	0x40014400
 8002268:	40014800 	.word	0x40014800
 800226c:	ffffefff 	.word	0xffffefff
 8002270:	ffffdfff 	.word	0xffffdfff

08002274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a26      	ldr	r2, [pc, #152]	; (800231c <TIM_OC4_SetConfig+0xa8>)
 8002284:	401a      	ands	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a20      	ldr	r2, [pc, #128]	; (8002320 <TIM_OC4_SetConfig+0xac>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <TIM_OC4_SetConfig+0xb0>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4a1b      	ldr	r2, [pc, #108]	; (8002328 <TIM_OC4_SetConfig+0xb4>)
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	031b      	lsls	r3, r3, #12
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <TIM_OC4_SetConfig+0xb8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d007      	beq.n	80022e4 <TIM_OC4_SetConfig+0x70>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a16      	ldr	r2, [pc, #88]	; (8002330 <TIM_OC4_SetConfig+0xbc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d003      	beq.n	80022e4 <TIM_OC4_SetConfig+0x70>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a15      	ldr	r2, [pc, #84]	; (8002334 <TIM_OC4_SetConfig+0xc0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d109      	bne.n	80022f8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	4a14      	ldr	r2, [pc, #80]	; (8002338 <TIM_OC4_SetConfig+0xc4>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	019b      	lsls	r3, r3, #6
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	621a      	str	r2, [r3, #32]
}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b006      	add	sp, #24
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	ffffefff 	.word	0xffffefff
 8002320:	ffff8fff 	.word	0xffff8fff
 8002324:	fffffcff 	.word	0xfffffcff
 8002328:	ffffdfff 	.word	0xffffdfff
 800232c:	40012c00 	.word	0x40012c00
 8002330:	40014400 	.word	0x40014400
 8002334:	40014800 	.word	0x40014800
 8002338:	ffffbfff 	.word	0xffffbfff

0800233c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	2201      	movs	r2, #1
 8002354:	4393      	bics	r3, r2
 8002356:	001a      	movs	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	22f0      	movs	r2, #240	; 0xf0
 8002366:	4393      	bics	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	220a      	movs	r2, #10
 8002378:	4393      	bics	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	621a      	str	r2, [r3, #32]
}
 8002390:	46c0      	nop			; (mov r8, r8)
 8002392:	46bd      	mov	sp, r7
 8002394:	b006      	add	sp, #24
 8002396:	bd80      	pop	{r7, pc}

08002398 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	2210      	movs	r2, #16
 80023aa:	4393      	bics	r3, r2
 80023ac:	001a      	movs	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <TIM_TI2_ConfigInputStage+0x60>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	031b      	lsls	r3, r3, #12
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	22a0      	movs	r2, #160	; 0xa0
 80023d4:	4393      	bics	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	621a      	str	r2, [r3, #32]
}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b006      	add	sp, #24
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	ffff0fff 	.word	0xffff0fff

080023fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2270      	movs	r2, #112	; 0x70
 8002410:	4393      	bics	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	2207      	movs	r2, #7
 800241c:	4313      	orrs	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	609a      	str	r2, [r3, #8]
}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	46bd      	mov	sp, r7
 800242a:	b004      	add	sp, #16
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	4a09      	ldr	r2, [pc, #36]	; (800246c <TIM_ETR_SetConfig+0x3c>)
 8002448:	4013      	ands	r3, r2
 800244a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	021a      	lsls	r2, r3, #8
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	431a      	orrs	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	609a      	str	r2, [r3, #8]
}
 8002464:	46c0      	nop			; (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	b006      	add	sp, #24
 800246a:	bd80      	pop	{r7, pc}
 800246c:	ffff00ff 	.word	0xffff00ff

08002470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	221f      	movs	r2, #31
 8002480:	4013      	ands	r3, r2
 8002482:	2201      	movs	r2, #1
 8002484:	409a      	lsls	r2, r3
 8002486:	0013      	movs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	43d2      	mvns	r2, r2
 8002492:	401a      	ands	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a1a      	ldr	r2, [r3, #32]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	211f      	movs	r1, #31
 80024a0:	400b      	ands	r3, r1
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4099      	lsls	r1, r3
 80024a6:	000b      	movs	r3, r1
 80024a8:	431a      	orrs	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	621a      	str	r2, [r3, #32]
}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b006      	add	sp, #24
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	223c      	movs	r2, #60	; 0x3c
 80024c6:	5c9b      	ldrb	r3, [r3, r2]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e03c      	b.n	800254a <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	223c      	movs	r2, #60	; 0x3c
 80024d4:	2101      	movs	r1, #1
 80024d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	223d      	movs	r2, #61	; 0x3d
 80024dc:	2102      	movs	r1, #2
 80024de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2270      	movs	r2, #112	; 0x70
 80024f4:	4393      	bics	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a11      	ldr	r2, [pc, #68]	; (8002554 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d004      	beq.n	800251e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d10c      	bne.n	8002538 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	4393      	bics	r3, r2
 8002524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	4313      	orrs	r3, r2
 800252e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	223d      	movs	r2, #61	; 0x3d
 800253c:	2101      	movs	r1, #1
 800253e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	223c      	movs	r2, #60	; 0x3c
 8002544:	2100      	movs	r1, #0
 8002546:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b004      	add	sp, #16
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	40012c00 	.word	0x40012c00
 8002558:	40000400 	.word	0x40000400

0800255c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	223c      	movs	r2, #60	; 0x3c
 800256e:	5c9b      	ldrb	r3, [r3, r2]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002574:	2302      	movs	r3, #2
 8002576:	e03e      	b.n	80025f6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	223c      	movs	r2, #60	; 0x3c
 800257c:	2101      	movs	r1, #1
 800257e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	22ff      	movs	r2, #255	; 0xff
 8002584:	4393      	bics	r3, r2
 8002586:	001a      	movs	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002594:	401a      	ands	r2, r3
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4a18      	ldr	r2, [pc, #96]	; (8002604 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80025a2:	401a      	ands	r2, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4a16      	ldr	r2, [pc, #88]	; (8002608 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80025b0:	401a      	ands	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a13      	ldr	r2, [pc, #76]	; (800260c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80025be:	401a      	ands	r2, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4a11      	ldr	r2, [pc, #68]	; (8002610 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80025cc:	401a      	ands	r2, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80025da:	401a      	ands	r2, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	223c      	movs	r2, #60	; 0x3c
 80025f0:	2100      	movs	r1, #0
 80025f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	0018      	movs	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b004      	add	sp, #16
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	fffffcff 	.word	0xfffffcff
 8002604:	fffffbff 	.word	0xfffffbff
 8002608:	fffff7ff 	.word	0xfffff7ff
 800260c:	ffffefff 	.word	0xffffefff
 8002610:	ffffdfff 	.word	0xffffdfff
 8002614:	ffffbfff 	.word	0xffffbfff

08002618 <__libc_init_array>:
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	2600      	movs	r6, #0
 800261c:	4d0c      	ldr	r5, [pc, #48]	; (8002650 <__libc_init_array+0x38>)
 800261e:	4c0d      	ldr	r4, [pc, #52]	; (8002654 <__libc_init_array+0x3c>)
 8002620:	1b64      	subs	r4, r4, r5
 8002622:	10a4      	asrs	r4, r4, #2
 8002624:	42a6      	cmp	r6, r4
 8002626:	d109      	bne.n	800263c <__libc_init_array+0x24>
 8002628:	2600      	movs	r6, #0
 800262a:	f000 f821 	bl	8002670 <_init>
 800262e:	4d0a      	ldr	r5, [pc, #40]	; (8002658 <__libc_init_array+0x40>)
 8002630:	4c0a      	ldr	r4, [pc, #40]	; (800265c <__libc_init_array+0x44>)
 8002632:	1b64      	subs	r4, r4, r5
 8002634:	10a4      	asrs	r4, r4, #2
 8002636:	42a6      	cmp	r6, r4
 8002638:	d105      	bne.n	8002646 <__libc_init_array+0x2e>
 800263a:	bd70      	pop	{r4, r5, r6, pc}
 800263c:	00b3      	lsls	r3, r6, #2
 800263e:	58eb      	ldr	r3, [r5, r3]
 8002640:	4798      	blx	r3
 8002642:	3601      	adds	r6, #1
 8002644:	e7ee      	b.n	8002624 <__libc_init_array+0xc>
 8002646:	00b3      	lsls	r3, r6, #2
 8002648:	58eb      	ldr	r3, [r5, r3]
 800264a:	4798      	blx	r3
 800264c:	3601      	adds	r6, #1
 800264e:	e7f2      	b.n	8002636 <__libc_init_array+0x1e>
 8002650:	080026b8 	.word	0x080026b8
 8002654:	080026b8 	.word	0x080026b8
 8002658:	080026b8 	.word	0x080026b8
 800265c:	080026bc 	.word	0x080026bc

08002660 <memset>:
 8002660:	0003      	movs	r3, r0
 8002662:	1882      	adds	r2, r0, r2
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <memset+0xa>
 8002668:	4770      	bx	lr
 800266a:	7019      	strb	r1, [r3, #0]
 800266c:	3301      	adds	r3, #1
 800266e:	e7f9      	b.n	8002664 <memset+0x4>

08002670 <_init>:
 8002670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002676:	bc08      	pop	{r3}
 8002678:	469e      	mov	lr, r3
 800267a:	4770      	bx	lr

0800267c <_fini>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002682:	bc08      	pop	{r3}
 8002684:	469e      	mov	lr, r3
 8002686:	4770      	bx	lr
